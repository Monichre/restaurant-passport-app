---
description: 
globs: 
alwaysApply: false
---
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

# File Summary

## Purpose

This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format

The content is organized as follows:

1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines

- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes

- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)

## Additional Info

# Directory Structure

```
.cursor/
  rules/
    prd.mdc
.storybook/
  mocks/
    db.js
  main.js
  main.ts
  preview.tsx
drizzle/
  meta/
    _journal.json
    0000_snapshot.json
    0001_snapshot.json
    0002_snapshot.json
    0003_snapshot.json
    0004_snapshot.json
notes/
  supabase_clerk_integration.md
plop-templates/
  component/
    component.hbs
    index.hbs
    index.js
  feature/
    feature-component.hbs
    feature-index.hbs
    index.js
public/
  empty.vtt
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
scripts/
  enriched_restaurants.csv
  enriched_restaurants.json
  final-restaurant-enricher.js
  firecrawl-extractor.js
  hybrid-scraper.js
  restaurants.csv
  restaurants.json
  run-hybrid-scraper.sh
  run-scraper.sh
  scrape-restaurants.js
src/
  actions/
    deals.ts
    restaurants.ts
    scan-actions.ts
  app/
    (public)/
      deals/
        page.tsx
      restaurants/
        [id]/
          page.tsx
        page.tsx
      sign-in/
        [[...sign-in]]/
          page.tsx
      sign-up/
        [[...sign-up]]/
          page.tsx
    admin/
      deals/
        [id]/
          edit/
            page.tsx
          page.tsx
        new/
          page.tsx
        page.tsx
      restaurants/
        [id]/
          page.tsx
        bulk-qr/
          page.tsx
        new/
          page.tsx
        actions.ts
        bulk-qr-code-manager.tsx
        bulk-qr.tsx
        dummy-components.tsx
        index.tsx
        page.tsx
        qr-code-manager.tsx
        selectable-restaurants-table.tsx
      users/
        page.tsx
      layout.tsx
      page.tsx
    api/
      restaurants/
        [id]/
          scan/
            route.ts
          route.ts
      sse/
        route.ts
      users/
        [id]/
          punchcards/
            route.ts
          route.ts
      webhooks/
        route.ts
    components/
      ui/
        BookTestimonial3D.tsx
    leaderboard/
      page.tsx
    users/
      [id]/
        profile/
          page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    admin/
      deals/
        actions.ts
        deal-detail.tsx
        deal-filters.tsx
        deals-table.tsx
        edit-deal-form.tsx
        index.ts
        new-deal-form.tsx
      admin-content.tsx
      admin-dashboard-content.tsx
      admin-ui.tsx
      csv-upload.tsx
      expandable-admin-menu.tsx
      prize-card.tsx
      punch-cards-list.tsx
      restaurant-deals-display.tsx
      restaurant-detail-modal.tsx
      restaurant-form.tsx
      restaurant-quick-view.tsx
      restaurants-table.tsx
      sidebar.css
      Sidebar.tsx
      SidebarContext.tsx
    BounceCards/
      BounceCards.tsx
    camera-permission-checker/
      camera-permission-checker.tsx
      index.ts
      README.md
    glitchFx/
      glitchFx.tsx
      index.tsx
    icons/
      BookMarked.tsx
      index.tsx
      info-card.tsx
      Martini.tsx
      PartyPopper.tsx
      Percent.tsx
      Salad.tsx
      ThumbsDown.tsx
      ThumbsUp.tsx
      Wine.tsx
    kokonutui/
      bento-grid.tsx
      btn-08.tsx
      card-10.tsx
      list-01.tsx
      list-02.tsx
      profile-02.tsx
      profile-04.tsx
    leaderboard/
      restaurant-leaderboard.tsx
      user-leaderboard.tsx
    magicui/
      dot-pattern.tsx
    motion-primitives/
      animated-group.tsx
      animated-number.tsx
    nav/
      nav-scanner.tsx
      nav.stories.tsx
      nav.tsx
    progress-indicator/
      index.tsx
      progress-indicator.tsx
    ui/
      alert-dialog.tsx
      alert.tsx
      animated-modal.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      data-table.tsx
      dialog.tsx
      divider.tsx
      dropdown-menu.tsx
      form.tsx
      hero-parallax.tsx
      in-view.tsx
      input.tsx
      label.tsx
      progress.tsx
      punchcard.tsx
      restaurant-punch-card.tsx
      restaurant-specific-user-punch-card.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      sonner.tsx
      spinner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      tooltip.tsx
      visually-hidden.tsx
    wallet-ui/
      index.ts
      index.tsx
      wallet-ui.stories.tsx
      wallet-ui.tsx
    button-drawer.tsx
    logo.tsx
    UserButton.tsx
  context/
    location-context.tsx
    style-wrapper.tsx
    user-context.tsx
  db/
    models/
      achievements/
        achievements.ts
        index.ts
      leaderboard/
        leaderboard.ts
      point-balances/
        index.ts
        point-balances.ts
      point-transfers/
        index.ts
        point-transfers.ts
      prize-redemptions/
        index.ts
        prize-redemptions.ts
      prizes/
        index.ts
        prizes.ts
      punch-cards/
        index.ts
        punch-cards.ts
      raffle-entries/
        index.ts
        raffle-entries.ts
      restaurants/
        index.ts
        restaurants.ts
      users/
        index.ts
        users.ts
      index.ts
    db.ts
    index.ts
    migrate.ts
    relations.ts
    schema.ts
    supabase.ts
  features/
    deals/
      DealsList.tsx
      index.ts
    prizes/
      prize-card/
        PrizeCard.tsx
    restaurants/
      restaurant-detail/
        RestaurantDetail.tsx
      AdminRestaurantSearchBar.tsx
      index.ts
      Restaurant.tsx
      RestaurantCard.tsx
      RestaurantList.tsx
      RestaurantLoading.tsx
      RestaurantSearchBar.tsx
      UserFacingRestaurantDetail.tsx
    users/
      passport/
        index.tsx
        passport.css
        passport.tsx
      GetUserPunchCard.tsx
      index.ts
      lottery-status.tsx
      share-punch-menu.tsx
      UserPunchCard.tsx
      UserPunchCards.tsx
  hooks/
    index.ts
    use-geolocation.tsx
    use-handle-bulk-qr-code.tsx
    use-handle-qr-code.tsx
    use-handle-qrCode.tsx
    use-mobile.tsx
    use-punch-card-subscription.ts
    use-server-sent-event.tsx
    use-toast.tsx
    use-websocket.tsx
    useRestaurantSearch.tsx
  lib/
    auth.ts
    constants.ts
    csv.ts
    svg-to-data-url.ts
    utils.ts
  stories/
    assets/
      accessibility.svg
      discord.svg
      github.svg
      tutorials.svg
      youtube.svg
    button.css
    Button.stories.ts
    Button.tsx
    Configure.mdx
    header.css
    Header.stories.ts
    Header.tsx
    page.css
    Page.stories.ts
    Page.tsx
  types/
    api.ts
    db.ts
    index.ts
    react-qr-scanner.d.ts
    schemas.ts
  middleware.ts
.cursorignore
.gitignore
CLAUDE.md
components.json
drizzle.config.ts
eslint.config.mjs
GENERATORS.md
next.config.ts
package.json
plopfile.js
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
```

# Files

## File: notes/supabase_clerk_integration.md

````markdown
# Supabase Integration with Clerk Middleware

## To-Do

- Create JWT template in Clerk Dashboard named "supabase"
- Install Supabase client library (`@supabase/supabase-js`)
- Set up environment variables for Supabase
- Implement authenticated Supabase clients (server and client side)
- Configure Row Level Security (RLS) in Supabase

## Implementation Notes

- Use `auth().getToken({ template: "supabase" })` to get JWT for Supabase
- Configure Row Level Security (RLS) in Supabase with JWT claims
- Update client initialization to pass auth token when available

## Code Snippets

### Server-side Supabase Authentication (with linter error fixes)

```typescript
// For server-side usage
export async function getAuthenticatedSupabaseClient() {
  // Fix: need to await auth() first
  const { getToken } = await auth();
  const supabaseToken = await getToken({ template: "supabase" });

  // Fix: add null checks for environment variables
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error("Missing Supabase environment variables");
  }

  return createClient(supabaseUrl, supabaseAnonKey, {
    global: {
      headers: { Authorization: `Bearer ${supabaseToken}` },
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  });
}
```

### Client-side Supabase Authentication

```typescript
// For client-side usage (in component)
export function createClerkSupabaseClient(
  getToken: () => Promise<string | null>,
) {
  // Fix: add null checks for environment variables
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error("Missing Supabase environment variables");
  }

  return createClient(supabaseUrl, supabaseAnonKey, {
    global: {
      fetch: async (url, options = {}) => {
        const token = await getToken();

        const headers = new Headers(options?.headers);
        if (token) {
          headers.set("Authorization", `Bearer ${token}`);
        }

        return fetch(url, {
          ...options,
          headers,
        });
      },
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  });
}
```

### Example Usage in Client Component

```typescript
'use client'
import { createClerkSupabaseClient } from '@/db/supabase';
import { useSession } from '@clerk/nextjs';
import { useEffect, useState } from 'react';

export default function SupabaseExample() {
  const { session } = useSession();
  const [data, setData] = useState(null);
  
  useEffect(() => {
    if (!session) return;
    
    async function fetchData() {
      const supabase = createClerkSupabaseClient(async () => {
        return session ? await session.getToken({ template: 'supabase' }) : null;
      });
      
      const { data, error } = await supabase.from('your_table').select('*');
      if (!error) {
        setData(data);
      }
    }
    
    fetchData();
  }, [session]);
  
  return (
    <div>
      {/* Render your data */}
    </div>
  );
}
```

### Example Usage in Server Component or API Route

```typescript
import { getAuthenticatedSupabaseClient } from '@/db/supabase';

export async function getData() {
  const supabase = await getAuthenticatedSupabaseClient();
  const { data, error } = await supabase.from('your_table').select('*');
  
  if (error) {
    console.error('Error fetching data:', error);
    return null;
  }
  
  return data;
}
```

## Required Supabase Setup

1. In Supabase SQL Editor, create a `requesting_user_id()` function:

```sql
create or replace function requesting_user_id() returns text as $$
  select nullif(current_setting('request.jwt.claims', true)::json->>'sub', '')::text;
$$ language sql stable;
```

2. Create Row Level Security policies for your tables:

```sql
-- Enable RLS
alter table your_table enable row level security;

-- Create policies
create policy "Users can view their own data" on your_table
  for select using (auth.uid() = user_id);

create policy "Users can insert their own data" on your_table
  for insert with check (auth.uid() = user_id);
```

## Resources

- [Clerk Supabase Integration Documentation](mdc:https:/clerk.com/docs/integrations/databases/supabase)
- [Supabase Row Level Security Guide](mdc:https:/supabase.com/docs/guides/auth/row-level-security)
- [Next.js with Supabase](mdc:https:/supabase.com/docs/guides/auth/auth-helpers/nextjs)
````

## File: .cursor/rules/prd.mdc

````
---
description: project requirements and architecture
globs: 
alwaysApply: true
---
Below is an updated Product Requirements Document that emphasizes Next.js, TypeScript, Tailwind CSS, ShadCN/UI, Framer Motion, Storybook, Supabase (PostgreSQL), and Clerk for authentication. It also highlights role-based authorization (User, Restaurant Admin, System Admin), user profiles, and prize management. It includes the relevant database model schema and the associated CRUD/REST endpoints.

Digital Punch Card & Loyalty Platform

1. Overview

This application is a Next.js-based digital punch card and loyalty system that leverages TypeScript for type safety, Tailwind CSS + ShadCN/UI for styling, Framer Motion for animations, Storybook for UI component documentation, and Clerk for authentication. The database is managed by Supabase (PostgreSQL) with Drizzle integration. Users earn “punches” at participating restaurants, can redeem prizes, and share achievements. Restaurants (via their admins) and a system admin can manage data through protected routes.

Key Features
 • Digital Punch Cards: Users earn punches, and upon reaching a threshold (e.g., 10 punches), they are entered into a raffle.
 • Role-Based Authorization:
 • User: Access their own profile, punch cards, achievements, and can transfer/earn points.
 • Restaurant Admin: Manage restaurant-specific data (prizes, analytics, etc.) for their own restaurant(s).
 • System Admin: Full access to all resources (managing users, restaurants, etc.).
 • Real-Time QR Code Validation: Staff or admins can scan a user’s QR code to add a punch instantly (via WebSockets).
 • Prizes & Raffles: Advanced prize management, redemption tracking, and raffle entries upon completing a punch card.
 • Points & Achievements: Gamified point transfer system with achievements and real-time leaderboard updates.
 • Analytics Dashboard: Restaurant-level analytics for punch cards, user activity, and prize redemptions.

2. Technical Stack
 1. Next.js (TypeScript)
 • Server-side rendering, file-based routing, API routes for some server logic if needed.
 • Integration with Storybook for UI component development.
 2. Clerk Authentication
 • Manages user sign-up, sign-in, SSO, and role-based access (user, restaurant admin, system admin).
 3. Supabase (PostgreSQL)
 • Hosts the database.
 • Communicated with via a custom storage layer.
 4. Tailwind CSS + ShadCN/UI
 • Provides utility-based styling and pre-built components for a consistent UI/UX.
 5. Framer Motion
 • Animations for badges, transitions, and dynamic elements (e.g., leaderboard updates).
 6. WebSockets
 • Real-time communication for QR validation and leaderboard updates.
 7. Storybook
 • Document and test UI components in isolation.

3. Roles & Authorization
 1. User
 • Default role after sign-up.
 • Can view their profile, punch cards, achievements, and transfer points to other users.
 2. Restaurant Admin
 • Can manage the resources (e.g., prizes, analytics) for their assigned restaurant(s).
 • Has extended permissions to update punch cards, view analytics, and handle prize redemptions for their restaurant.
 3. System Admin
 • Has full access to all resources across the platform.
 • Manages users, restaurants, global settings, and can see all analytics.

4. User Flows & Features

4.1 User Onboarding & Profile
 • Sign Up / Sign In:
 • Powered by Clerk.
 • The sign-up flow ensures users have a clerkId, and they’re assigned the default “User” role.
 • Profile Page:
 • Displays user information, achievements, points, and punch cards.

4.2 Punch Card System
 • Restaurant Listing Page:
 • Shows participating restaurants with relevant info (name, image, address, etc.).
 • Punch Card View:
 • Shows the user’s punch count and a QR code to be scanned by staff.
 • Once a user hits the required punches, the card is marked completed and a raffle entry is created.

4.3 QR Code Validation & Raffle
 • QR Scanning (Staff or Restaurant Admin):
 • Real-time validation via WebSockets.
 • Increments the punch card and checks if it’s completed.
 • Raffle Entries:
 • Automatically created when a punch card completes.
 • Used for prize drawings and giveaways.

4.4 Prizes & Prize Redemptions
 • Prize Management (Restaurant Admin or System Admin):
 • Create, edit, and delete prizes (e.g., free coffee, dessert).
 • Configure redemption rules, expiration, quantity, etc.
 • Prize Redemption:
 • Users can redeem prizes if they meet the required punches.
 • System tracks redemption status (redeemed, pending, etc.) and handles expiration logic.

4.5 Points & Achievements
 • Point Balances:
 • Users have a points balance that can be transferred to other users.
 • Point Transfers:
 • A user can send points to another user (if they have enough).
 • Achievements triggered by the first transfer, or certain milestones (100, 500, 1000 points, etc.).
 • Leaderboard:
 • Real-time ranking of users by their points, updated via WebSockets.

4.6 Analytics & Dashboards
 • Restaurant Analytics:
 • Accessible to Restaurant Admin for their restaurant and System Admin for all.
 • Tracks user engagement (punch cards completed, redemption rates, active users, etc.).
 • Graphs and charts for daily/weekly/monthly trends.

5. Database Model & CRUD/REST Routes

Below is the Drizzle ORM schema (TypeScript + Zod) defining the PostgreSQL tables. Each table has corresponding CRUD/REST routes (or integrated Next.js API routes, depending on structure).

5.1 Database Schema

import { pgTable, text, serial, integer, boolean, timestamp, json } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

/* USERS */
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  clerkId: text("clerk_id").notNull().unique(),
  name: text("name").notNull(),
  isStaff: boolean("is_staff").default(false),   // e.g., restaurant admin
  isAdmin: boolean("is_admin").default(false),   // system admin
});

/* RESTAURANTS */
export const restaurants = pgTable("restaurants", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  imageUrl: text("image_url").notNull(),
  address: text("address").notNull(),
});

/* PUNCH CARDS */
export const punchCards = pgTable("punch_cards", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  restaurantId: integer("restaurant_id").references(() => restaurants.id),
  punches: integer("punches").default(0),
  completed: boolean("completed").default(false),
  updatedAt: timestamp("updated_at").defaultNow(),
});

/* RAFFLE ENTRIES */
export const raffleEntries = pgTable("raffle_entries", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  punchCardId: integer("punch_card_id").references(() => punchCards.id),
  createdAt: timestamp("created_at").defaultNow(),
});

/* PRIZES */
export const prizes = pgTable("prizes", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  imageUrl: text("image_url").notNull(),
  type: text("type").notNull(),
  restaurantId: integer("restaurant_id").references(() => restaurants.id),
  requiredPunches: integer("required_punches").notNull(),
  available: boolean("available").default(true),
  quantity: integer("quantity").default(0),
  rules: json("rules").default({}).notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

/* PRIZE REDEMPTIONS */
export const prizeRedemptions = pgTable("prize_redemptions", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  prizeId: integer("prize_id").references(() => prizes.id),
  punchCardId: integer("punch_card_id").references(() => punchCards.id),
  status: text("status").notNull(),
  redeemedAt: timestamp("redeemed_at"),
  expiresAt: timestamp("expires_at"),
  createdAt: timestamp("created_at").defaultNow(),
});

/* POINT BALANCES */
export const pointBalances = pgTable("point_balances", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  points: integer("points").notNull().default(0),
  updatedAt: timestamp("updated_at").defaultNow(),
});

/* POINT TRANSFERS */
export const pointTransfers = pgTable("point_transfers", {
  id: serial("id").primaryKey(),
  fromUserId: integer("from_user_id").references(() => users.id),
  toUserId: integer("to_user_id").references(() => users.id),
  points: integer("points").notNull(),
  message: text("message"),
  status: text("status").notNull(), // e.g., pending, completed, cancelled
  createdAt: timestamp("created_at").defaultNow(),
});

/* ACHIEVEMENTS */
export const achievements = pgTable("achievements", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  type: text("type").notNull(), // e.g., first_transfer, transfer_milestone
  data: json("data").default({}),
  unlockedAt: timestamp("unlocked_at").defaultNow(),
});

5.2 Insert Schemas & Validation (Zod)

Examples:

export const insertUserSchema = createInsertSchema(users).pick({
  clerkId: true,
  name: true,
  isStaff: true,
  isAdmin: true,
});
export const insertRestaurantSchema = createInsertSchema(restaurants);
export const insertPunchCardSchema = createInsertSchema(punchCards);
export const insertPrizeSchema = createInsertSchema(prizes).omit({
  id: true,
  createdAt: true,
}).extend({
  rules: z.object({
    expirationDays: z.number().optional(),
    usageLimit: z.number().optional(),
    terms: z.string().optional(),
  }).optional(),
});
export const insertPrizeRedemptionSchema = createInsertSchema(prizeRedemptions).omit({
  id: true,
  createdAt: true,
  redeemedAt: true,
});
export const insertPointTransferSchema = createInsertSchema(pointTransfers, {
  points: z.number().min(1),
  message: z.string().max(200).optional(),
}).omit({ id: true, createdAt: true });

5.3 Example CRUD/REST Routes

The following routes (shown in an Express-like format) can also be integrated into Next.js API routes if preferred:
 1. User Routes
 • POST /api/users – create a user (via insertUserSchema)
 • GET /api/users/clerk/:clerkId – retrieve user by clerk ID
 2. Restaurant Routes
 • GET /api/restaurants – list all restaurants
 • GET /api/restaurants/:id – get a specific restaurant
 3. Punch Card Routes
 • POST /api/punch-cards – create a new punch card
 • POST /api/punch-cards/:id/punch – increment punch count
 • GET /api/users/:userId/punch-cards – get all punch cards for a user
 4. Raffle Routes
 • POST /api/raffle-entries – create a raffle entry
 5. Prize Management
 • POST /api/prizes – create a new prize
 • GET /api/restaurants/:restaurantId/prizes – list prizes for a restaurant
 • GET /api/prizes/:id – get a specific prize
 • PATCH /api/prizes/:id – update an existing prize
 6. Prize Redemption
 • POST /api/prize-redemptions – create a new redemption
 • GET /api/users/:userId/prize-redemptions – list user’s prize redemptions
 • PATCH /api/prize-redemptions/:id/status – update redemption status
 7. Analytics
 • GET /api/restaurants/:restaurantId/analytics – retrieve punch card and redemption analytics
 8. Points & Leaderboard
 • GET /api/users/:userId/points – get point balance for a user
 • GET /api/leaderboard – get overall leaderboard
 • POST /api/point-transfers – transfer points between users
 • GET /api/users/:userId/transfers – get transfer history
 • GET /api/users/:userId/achievements – get user achievements
 9. WebSocket
 • ws://<server>/ws – handles real-time QR validation messages.

6. Role-Based Access & Authorization
 • Middleware / Next.js API Route Guards
 • Use Clerk’s role checks to ensure only restaurant admins or system admins can manage prizes, analytics, or punch cards.
 • Restrict system-level actions (e.g., reading all resources, user creation) to system admin.
 • Users can only access their own punch cards, points, and achievements.

Example checks in Next.js:

// e.g. a Next.js API route
import { getAuth } from '@clerk/nextjs/server';

export default async function handler(req, res) {
  const { userId, sessionId, getToken } = getAuth(req);
  // Retrieve user from DB, check roles...
}

7. UI/UX & Styling
 1. Tailwind CSS + ShadCN/UI
 • Provides utility classes and theming.
 2. Framer Motion
 • Used for animated transitions, particularly for the achievements and leaderboard rank changes.
 3. Storybook
 • Document reusable components (e.g., “PunchCardDisplay”, “LeaderboardTable”, “AchievementBadge”).
 4. Responsive & Accessible
 • Mobile-friendly layout for scanning QR codes from phones.
 • Aria labels, keyboard navigation, and basic accessibility checks.

8. Key Use Cases & Scenarios
 1. User Redeems a Punch
 • The user visits a restaurant, staff scans the user’s QR code.
 • The punch count increments in real-time.
 • If the punch card is completed, a raffle entry is created.
 2. Restaurant Admin Updates a Prize
 • The admin logs into the admin dashboard.
 • Navigates to “Prizes” for their restaurant.
 • Creates or updates a prize, specifying required punches, availability, etc.
 3. System Admin Manages a Restaurant Admin
 • System admin grants a user isStaff for a specific restaurant or sets isAdmin to true for full privileges.
 4. User Transfers Points
 • A user chooses a recipient and enters the number of points to transfer.
 • The system checks if the sender has enough points, completes the transfer, updates balances, and triggers an achievement check.

9. Analytics & Reporting
 • Restaurant-Level Metrics
 • Completed vs. total punch cards.
 • Redemption rates for prizes.
 • Active users in the last 30 days.
 • Historical activity data for daily punch counts.
 • Leaderboards
 • Points-based ranking with real-time updates.

10. Testing & Quality
 1. Unit Tests:
 • Test Next.js pages, custom hooks (e.g., useWebSocket), and server routes.
 2. Integration Tests:
 • Validate flows (sign-up, punch card scanning, prize redemption).
 3. E2E Tests:
 • Use Playwright or Cypress to test the entire user journey.
 4. Storybook Visual Testing:
 • Ensure components render consistently across states (loading, success, error).

11. Deployment & DevOps
 1. Environment Variables:
 • NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY, CLERK_SECRET_KEY
 • SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY (secured)
 2. CI/CD:
 • Automated testing pipeline (GitHub Actions or similar).
 3. Hosting:
 • Next.js can be hosted on Vercel or similar.
 • Supabase for database hosting.

12. Next Steps & Enhancements
 • Multiple Campaigns: Support multiple parallel punch-card campaigns within a single restaurant.
 • Expanded Social Sharing: More robust social media integration (Facebook, Twitter, etc.).
 • Deeper Analytics: Additional dashboards for points economy, user churn, advanced segmentation.
 • Localization & Internationalization: Provide multi-language support for broader reach.

13. Summary

This Next.js + TypeScript application integrates Clerk for authentication, Supabase for the database, Tailwind CSS + ShadCN/UI for styling, and Framer Motion for animation. It includes robust role-based authorization for Users, Restaurant Admins, and System Admins. The platform offers digital punch cards, real-time QR code validation, prize management, gamified point transfers, achievements, and analytics dashboards. The included Drizzle ORM schema and CRUD/REST endpoints illustrate how data is managed and accessed, ensuring a clear, maintainable foundation for future growth and enhancements.
````

## File: .storybook/mocks/db.js

````javascript
// Mock for database-related functions
// This file will be imported instead of the real db modules in Storybook
⋮----
updatedAt: new Date().toISOString(),
⋮----
// Mock database functions
export const getUserByClerkId = async () => mockUser;
export const getRestaurantById = async () => mockRestaurant;
export const getUserRestaurantPunchCard = async () => mockPunchCard;
⋮----
// Add more mock functions as needed for your Storybook stories
````

## File: .storybook/main.js

````javascript
// Importing Node.js native modules with the node: protocol
⋮----
webpackFinal: async (config, { configType }) => {
// Add polyfills and mocks for Node.js modules
⋮----
buffer: require.resolve("buffer/"),
stream: require.resolve("stream-browserify"),
util: require.resolve("util/"),
crypto: require.resolve("crypto-browserify"),
⋮----
// Replace server-side modules with mocks
⋮----
"@/db/models/users/users": path.resolve(__dirname, "./mocks/db.js"),
"drizzle-orm/postgres-js": path.resolve(__dirname, "./mocks/db.js"),
⋮----
// Return the modified config
````

## File: src/actions/deals.ts

````typescript
import { revalidatePath } from "next/cache";
import { db } from "@/db";
import { restaurantDeals } from "@/db/drizzle/schema";
import { z } from "zod";
import { eq } from "drizzle-orm";
⋮----
// Action result type
type ActionResult = {
 success: boolean;
 message: string;
 error?: Record<string, string[]>;
};
⋮----
// Add function to handle CSV bulk import
export async function importDealsFromCSV(
 dealsData: Record<string, unknown>[],
): Promise<ActionResult>
⋮----
// Validate the deal data with Zod
⋮----
// Validate each deal
⋮----
// Format dates as ISO strings for drizzle
⋮----
// If validation fails, throw with details
⋮----
// Insert all deals into the database
⋮----
// Revalidate the deals page to show the new data
⋮----
// Define other deal-related actions
export async function updateDealAction(
 id: bigint | number,
 data: Partial<typeof restaurantDeals.$inferInsert>,
): Promise<ActionResult>
````

## File: src/app/(public)/sign-in/[[...sign-in]]/page.tsx

````typescript
import { SignIn } from "@clerk/nextjs";
⋮----
export default function Page()
````

## File: src/app/(public)/sign-up/[[...sign-up]]/page.tsx

````typescript
import { SignUp } from "@clerk/nextjs";
⋮----
export default function Page()
````

## File: src/app/admin/deals/new/page.tsx

````typescript
import { NewDealForm } from "@/components/admin/deals/new-deal-form";
⋮----
export default function NewDealPage()
````

## File: src/app/admin/deals/page.tsx

````typescript
import { DealFilters } from "@/components/admin/deals/deal-filters";
import { DealsTable } from "@/components/admin/deals/deals-table";
import { getDeals, getRestaurants } from "@/db/models/restaurants/restaurants";
⋮----
// // Find all deals from all restaurants
// const allDeals = [];
⋮----
// // Extract deals from all restaurants
// for (const restaurant of restaurants) {
//  if (restaurant.deals && restaurant.deals.length > 0) {
//   // Filter to only include active deals
//   const activeDeals = restaurant.deals
//    .filter((deal) => deal.active)
//    .map((deal) => ({
//     ...deal,
//     restaurant: {
//      id: restaurant.id,
//      name: restaurant.name,
//      imageUrl: restaurant.imageUrl,
//     },
//    }));
//   // Add restaurant information to each deal
//   const dealsWithRestaurant = activeDeals.map((deal) => ({
//    ...deal,
//    restaurant: {
//     id: restaurant.id,
//     name: restaurant.name,
//     imageUrl: restaurant.imageUrl,
//    },
//   }));
⋮----
//   // Use the deals with restaurant information
//   // if (dealsWithRestaurant.length > 0) {
//   //  allDeals.push(...dealsWithRestaurant);
//   // }
//   if (activeDeals.length > 0) {
//    allDeals.push(...activeDeals);
//   }
//  }
// }
````

## File: src/app/admin/restaurants/bulk-qr/page.tsx

````typescript
import { getRestaurants } from "@/db/models";
import { BulkQRPage } from "../bulk-qr";
import type { Restaurant } from "@/types/db";
⋮----
export default async function BulkQRCodePage()
⋮----
// Process the data to ensure it matches the Restaurant type
⋮----
// Create a type-safe restaurant object
````

## File: src/app/admin/restaurants/bulk-qr-code-manager.tsx

````typescript
import { useState, useRef, useEffect } from "react";
import { useHandleQRCode } from "@/hooks/use-handle-qr-code";
import type { Restaurant } from "@/types/db";
import {
 Dialog,
 DialogContent,
 DialogTrigger,
 DialogTitle,
 DialogHeader,
 DialogDescription,
 DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import {
 Table,
 TableBody,
 TableCell,
 TableHead,
 TableHeader,
 TableRow,
} from "@/components/ui/table";
import {
 AlertCircle,
 CheckCircle2,
 Download,
 QrCode,
 RefreshCw,
 Save,
 X,
} from "lucide-react";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import Image from "next/image";
⋮----
interface BulkQRCodeManagerProps {
 restaurants: Restaurant[];
}
⋮----
// Add ref for checkbox to handle indeterminate state properly
⋮----
// Apply indeterminate state via DOM API when needed
⋮----
// Access the DOM element through ref.current
⋮----
// Use HTMLInputElement as it has the indeterminate property
⋮----
// Set indeterminate state
⋮----
// Handle dialog close - reset state if needed
const handleOpenChange = (newOpen: boolean) =>
⋮----
toggleSelectAll(restaurants, checked === true)
````

## File: src/app/admin/restaurants/bulk-qr.tsx

````typescript
import { useState, useEffect } from "react";
import { useHandleQRCode } from "@/hooks/use-handle-qr-code";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import Link from "next/link";
import Image from "next/image";
import {
 Check,
 X,
 QrCode,
 RefreshCw,
 Download,
 Save,
 ChevronLeft,
} from "lucide-react";
⋮----
// Import types and fetch function
import type { Restaurant } from "@/types/db";
⋮----
// Set client-side flag to avoid hydration issues
⋮----
{/* Selection controls */}
⋮----
toggleSelectAll(restaurants, checked === true)
⋮----
{/* Progress indicator */}
⋮----
{/* Restaurant list */}
⋮----
{/* QR Code Status */}
````

## File: src/app/admin/restaurants/dummy-components.tsx

````typescript
import type { ReactNode } from "react";
import { Button } from "@/components/ui/button";
import type { Restaurant } from "@/types/db";
⋮----
// Placeholder for PageHeader component
export function PageHeader({
 heading,
 subheading,
}:
⋮----
// Placeholder for AddRestaurantDialog component
export function AddRestaurantDialog(
⋮----
// Placeholder for RestaurantsList component
````

## File: src/app/admin/restaurants/index.tsx

````typescript
// Import the BulkQRCodeManager component
import { getRestaurants } from "@/db/models/restaurants";
import { PageHeader } from "./dummy-components";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { AddRestaurantDialog } from "./dummy-components";
import { SelectableRestaurantsTable } from "./selectable-restaurants-table";
import type { Restaurant } from "@/types/db";
⋮----
export default async function RestaurantsPage()
⋮----
// Fetch restaurants from the database
⋮----
// Process the data to ensure it matches the Restaurant type
// We need to do this two-step approach to handle the type safely
⋮----
// First cast to unknown to avoid TypeScript errors
⋮----
// For arrays that might not match the expected type exactly,
// create empty arrays as a safe default
⋮----
// Include scalar counts directly
⋮----
// Then cast to Restaurant type
````

## File: src/app/admin/restaurants/selectable-restaurants-table.tsx

````typescript
import { useState } from "react";
import { useHandleBulkQRCode } from "@/hooks/use-handle-bulk-qr-code";
import type { Restaurant } from "@/types/db";
import {
 Table,
 TableBody,
 TableCell,
 TableHead,
 TableHeader,
 TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { QRCodeManager } from "./qr-code-manager";
import {
 AlertCircle,
 CheckCircle2,
 Download,
 QrCode,
 Save,
 X,
} from "lucide-react";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import Image from "next/image";
import Link from "next/link";
⋮----
interface SelectableRestaurantsTableProps {
 restaurants: Restaurant[];
}
⋮----
{/* Toolbar with bulk actions */}
⋮----
{/* Error and success messages */}
⋮----
{/* Progress indicator for generation */}
⋮----
{/* Main restaurants table */}
````

## File: src/app/api/restaurants/[id]/route.ts

````typescript
import { type NextRequest, NextResponse } from "next/server";
import { updateRestaurant } from "@/db/models/restaurants/restaurants";
import { z } from "zod";
⋮----
// Schema for validating update requests
⋮----
export async function PUT(
 req: NextRequest,
 { params }: { params: { id: string } },
)
⋮----
// Validate the restaurant id
⋮----
// Parse and validate the request body
⋮----
// Update the restaurant in the database
⋮----
// Return the updated restaurant
⋮----
export async function GET(
 req: NextRequest,
 { params }: { params: { id: string } },
)
⋮----
// This could be implemented to get a single restaurant by ID
⋮----
export async function DELETE(
 req: NextRequest,
 { params }: { params: { id: string } },
)
⋮----
// This could be implemented to delete a restaurant by ID
````

## File: src/app/api/sse/route.ts

````typescript
import type { NextRequest } from "next/server";
⋮----
// Store active connections
⋮----
export async function GET(request: NextRequest)
⋮----
// const body = await request.json();
⋮----
// console.log("🚀 ~ GET ~ body:", body);
⋮----
async start(controller)
⋮----
// Add this client to the set
⋮----
// Send initial connection message
⋮----
// Remove client when connection closes
⋮----
export async function POST(request: NextRequest)
⋮----
// Validate the request body
⋮----
// Handle QR code validation
⋮----
// Validate required fields
⋮----
// TODO: Implement actual validation logic with database
// This is a placeholder for demonstration
const isValid = true; // In a real app, this would be determined by DB check
⋮----
// Create response message
⋮----
// Broadcast to all clients
⋮----
// Handle other message types
⋮----
// Broadcast a message to all connected clients
function broadcastMessage(message: unknown)
⋮----
// Encode data in SSE format
function encodeSSE(event: string, data: string): Uint8Array
````

## File: src/app/api/users/[id]/punchcards/route.ts

````typescript
import { type NextRequest, NextResponse } from "next/server";
import { getPunchCardsByUserId } from "@/db/models/punch-cards/punch-cards";
import { auth } from "@clerk/nextjs/server";
⋮----
import type { ApiResponse } from "@/types/api";
import { getUserByClerkId } from "@/db";
import { convertBigIntToString } from "@/lib/utils";
⋮----
export async function GET(
 request: NextRequest,
 context: { params: { id: string } },
)
⋮----
// Get the authenticated user from Clerk
⋮----
// If not authenticated, return 401
⋮----
// Extract params safely
⋮----
// if (!id) {
//  return NextResponse.json(
//   { success: false, error: "User ID is required" } as ApiResponse,
//   { status: 400 },
//  );
// }
⋮----
// Get the user's punch cards with restaurant information
⋮----
// Convert bigint to string for JSON serialization
````

## File: src/app/api/users/[id]/route.ts

````typescript
import { type NextRequest, NextResponse } from "next/server";
import { getPunchCardsByUserId } from "@/db/models/punch-cards/punch-cards";
import { auth } from "@clerk/nextjs/server";
⋮----
import type { ApiResponse } from "@/types/api";
import { convertBigInts } from "@/lib/utils";
import { getUserByClerkId } from "@/db/models/users/users";
⋮----
export async function GET(
 request: NextRequest,
 context: { params: { id: string } },
)
⋮----
// Get the authenticated user from Clerk
````

## File: src/app/components/ui/BookTestimonial3D.tsx

````typescript
import Image from 'next/image';
import React, { useRef } from 'react';
import HTMLFlipBook from 'react-pageflip';
import { useMediaQuery } from '@react-hook/media-query';
⋮----
interface Testimonial {
  image?: string;
  text: string;
  name: string;
  jobtitle: string;
  rating: number;
}
⋮----
interface BookTestimonial3DProps {
  testimonials: Testimonial[];
}
⋮----
const handleFlip = (pageNum: number) =>
⋮----
onFlip=
onChangeState=
⋮----
{/* Cover Page */}
⋮----
{/* Company Logo */}
⋮----
{/* Company Name */}
⋮----
{/* Index Page */}
⋮----
{/* Testimonials Pages */}
⋮----
<svg key={i} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FFA800" className="size-8">
⋮----
<svg key={i} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#CBD5E1" className="size-8">
⋮----
{/* Back Cover */}
````

## File: src/app/leaderboard/page.tsx

````typescript
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
 Card,
 CardContent,
 CardDescription,
 CardHeader,
 CardTitle,
} from "@/components/ui/card";
import {
 getTopUsersByPunchCardCount,
 getPopularRestaurantsByPunchCardCount,
} from "@/db/models/leaderboard/leaderboard";
import { convertBigInts } from "@/lib/utils";
import { UserLeaderboard } from "@/components/leaderboard/user-leaderboard";
import { RestaurantLeaderboard } from "@/components/leaderboard/restaurant-leaderboard";
⋮----
export default async function LeaderboardPage()
⋮----
// Fetch leaderboard data
⋮----
// Convert BigInt values to strings for serialization
````

## File: src/components/admin/deals/actions.ts

````typescript
import { revalidatePath } from "next/cache";
import { createRestaurantDeal } from "@/db/models/restaurants/restaurants";
⋮----
// Define the form action type
export type FormState = {
 error: string | null;
 success: boolean;
};
⋮----
// Server action to handle form submission
export async function createDeal(
 prevState: FormState,
 formData: FormData,
): Promise<FormState>
⋮----
// Extract values from formData
⋮----
// Validate form data
⋮----
// Create the deal
⋮----
// Revalidate the deals page to show the new deal
````

## File: src/components/admin/deals/deal-detail.tsx

````typescript
import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { Calendar, Store, Edit, Trash2 } from "lucide-react";
import type { Deal, Restaurant } from "@/types/db";
⋮----
// Mock data for testing - this would be replaced with actual API calls
const getMockDeal = (
 id: string,
): (Deal &
⋮----
interface DealDetailProps {
 id: string;
}
⋮----
// Fetch deal data - in a real app, this would be an API call
const fetchDeal = async () =>
⋮----
// Simulate API delay
⋮----
const handleDelete = async () =>
⋮----
// In a real app, this would be an API call
⋮----
// Redirect to deals listing page on success
⋮----
{/* Header with actions */}
⋮----
{/* Deal content */}
⋮----
{/* Left column: Image and status */}
⋮----
{/* Right column: Description and additional info */}
````

## File: src/components/admin/deals/deal-filters.tsx

````typescript
import { useState, useEffect } from "react";
import { getRestaurants } from "@/db/models/restaurants/restaurants";
import type { Deal, Restaurant } from "@/types";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
 Select,
 SelectContent,
 SelectItem,
 SelectTrigger,
 SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
⋮----
// Basic restaurant info we need for the dropdown
type RestaurantBasicInfo = {
 id: bigint;
 name: string;
};
⋮----
const fetchRestaurants = async () =>
⋮----
// Extract just the id and name which is all we need for the dropdown
⋮----
const handleSubmit = (e: React.FormEvent) =>
⋮----
// In a real app, this would trigger a search/filter API call
⋮----
const handleReset = () =>
⋮----
{/* Search filter */}
⋮----
{/* Restaurant filter */}
⋮----
{/* Status filter */}
⋮----
{/* Action buttons */}
````

## File: src/components/admin/admin-dashboard-content.tsx

````typescript
import Link from "next/link";
import type { User } from "@/types/db";
⋮----
type AdminDashboardContentProps = {
 user: User | null;
};
⋮----
export function AdminDashboardContent(
````

## File: src/components/admin/admin-ui.tsx

````typescript
import { SidebarProvider } from "@/components/admin/SidebarContext";
import { AdminContent } from "@/components/admin/admin-content";
⋮----
// Client component that renders the admin UI
export function AdminUI(
````

## File: src/components/admin/csv-upload.tsx

````typescript
import React, {useState} from 'react'
import {parseCSV} from '@/lib/csv'
import {toast} from 'sonner'
import {Button} from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import {Alert, AlertDescription, AlertTitle} from '@/components/ui/alert'
import {AlertCircle, FileUp, Loader2} from 'lucide-react'
import {Progress} from '@/components/ui/progress'
⋮----
type CSVUploadProps = {
  onUpload: (data: Record<string, unknown>[]) => Promise<void>
  requiredColumns: string[]
  entityName: string
  buttonText?: string
  icon?: React.ReactNode
}
⋮----
export function CSVUpload({
  onUpload,
  requiredColumns,
  entityName,
  buttonText = 'Import CSV',
  icon = <FileUp className='h-4 w-4 mr-2' />,
}: CSVUploadProps)
⋮----
const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const handleDragOver = (event: React.DragEvent<HTMLButtonElement>) =>
⋮----
const handleDrop = (event: React.DragEvent<HTMLButtonElement>) =>
⋮----
const handleSubmit = async () =>
⋮----
// Parse and validate the CSV
⋮----
// Upload the data using the provided callback
⋮----
// Close dialog and show success message
⋮----
const handleCancel = () =>
⋮----
onClick=
````

## File: src/components/admin/expandable-admin-menu.tsx

````typescript
import { useState, useRef, type RefObject } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { Bell, Home, HelpCircle, Settings, Shield } from "lucide-react";
import { useOnClickOutside } from "usehooks-ts";
import React from "react";
````

## File: src/components/admin/punch-cards-list.tsx

````typescript
import type { PunchCard } from "@/types/db";
import { Badge } from "@/components/ui/badge";
import {
 Table,
 TableBody,
 TableCell,
 TableHead,
 TableHeader,
 TableRow,
} from "@/components/ui/table";
⋮----
interface PunchCardsListProps {
 punchCards: PunchCard[];
}
⋮----
export function PunchCardsList(
⋮----
// Helper function to format date
const formatDate = (date: Date) =>
````

## File: src/components/admin/restaurant-deals-display.tsx

````typescript
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import type { Deal } from "./restaurant-quick-view";
⋮----
interface DealsListProps {
 deals: Deal[];
 activeDeals: number;
 onCreateDeal: () => void;
}
⋮----
export function DealsList({
 deals,
 activeDeals,
 onCreateDeal,
}: DealsListProps)
⋮----
e.stopPropagation();
onCreateDeal();
⋮----
interface EmptyDealsProps {
 onCreateDeal: () => void;
}
⋮----
export function EmptyDeals(
````

## File: src/components/admin/restaurant-form.tsx

````typescript
import { useState, useRef, useCallback } from "react";
import { useRouter } from "next/navigation";
import { z } from "zod";
import { createRestaurantAction } from "@/app/admin/restaurants/actions";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { createRestaurantSchema } from "@/types/schemas";
import Image from "next/image";
⋮----
type FormData = z.infer<typeof createRestaurantSchema>;
⋮----
// File upload state
⋮----
const handleChange = (
  e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
) =>
⋮----
// Clear error for this field when user types
⋮----
// Process the selected file
⋮----
// Validate file type
⋮----
// Validate file size (max 5MB)
⋮----
// Set the image preview
⋮----
// Set the imageUrl to the preview for validation
⋮----
// Handle file selection
const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
// Drag and drop handlers
⋮----
// Open file dialog when clicking on the upload area
const openFileDialog = () =>
⋮----
// Function to handle file upload
const uploadImageToServer = async (file: File): Promise<string> =>
⋮----
// In a real implementation, you would upload the file to your server or a service like S3
// For now, we'll just return the data URL
⋮----
const validateForm = (): boolean =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Upload image file if selected
⋮----
// Update formData with the uploaded image URL
````

## File: src/components/admin/sidebar.css

````css
#sidebar {
````

## File: src/components/BounceCards/BounceCards.tsx

````typescript
import { useEffect } from "react";
import { gsap } from "gsap";
⋮----
interface BounceCardsProps {
  className?: string;
  images?: string[];
  containerWidth?: number;
  containerHeight?: number;
  animationDelay?: number;
  animationStagger?: number;
  easeType?: string;
  transformStyles?: string[];
  enableHover?: boolean;
}
⋮----
const getNoRotationTransform = (transformStr: string): string =>
⋮----
const getPushedTransform = (
    baseTransform: string,
    offsetX: number
): string =>
⋮----
const pushSiblings = (hoveredIdx: number) =>
⋮----
const resetSiblings = () =>
````

## File: src/components/camera-permission-checker/camera-permission-checker.tsx

````typescript
import { useState, useCallback, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { AlertTriangle, Camera, Check } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
⋮----
interface CameraPermissionCheckerProps {
  onPermissionGranted?: () => void;
  onPermissionDenied?: () => void;
  checkOnMount?: boolean;
  showStatus?: boolean;
}
⋮----
// Check if user agent contains "Arc"
⋮----
// Common ways to detect incognito mode
⋮----
// Try to check for service worker which might be restricted in incognito
⋮----
// Try to get permission status
⋮----
// Fallback to directly requesting camera access
⋮----
// Clean up stream right away
⋮----
// Special handling for Arc browser in incognito
⋮----
// Try first with basic constraints
⋮----
// Try with more specific constraints
⋮----
// Standard approach for other browsers
⋮----
// Check on mount if required
⋮----
// Don't render anything if status shouldn't be shown
````

## File: src/components/camera-permission-checker/index.ts

````typescript

````

## File: src/components/camera-permission-checker/README.md

````markdown
# Camera Permission Checker Component

A reusable React component for checking and requesting camera permissions. This component provides a user-friendly interface for handling camera permissions in web applications.

## Features

- Checks camera permission status (granted, denied, prompt, checking)
- Provides visual feedback about the current permission state
- Handles permission requests with retry options
- Special handling for Arc browser in incognito mode
- Allows callback functions for permission granted/denied events

## Usage

### Basic Usage

```tsx
import { CameraPermissionChecker } from "@/components/camera-permission-checker";

export function MyComponent() {
  return (
    <div>
      <h1>My Camera App</h1>
      
      <CameraPermissionChecker
        onPermissionGranted={() => console.log("Camera permission granted")}
        onPermissionDenied={() => console.log("Camera permission denied")}
      />
      
      {/* Rest of your component */}
    </div>
  );
}
```

### Hidden Status Display

You can use the component to check permissions without showing the UI:

```tsx
<CameraPermissionChecker
  onPermissionGranted={() => startCamera()}
  onPermissionDenied={() => showCustomError()}
  showStatus={false}
/>
```

### Custom Permission Flow

You can disable the automatic permission check on mount:

```tsx
function MyComponent() {
  const startScan = () => {
    // Start scanning logic
  };
  
  return (
    <div>
      <button onClick={startScan}>Start Scan</button>
      
      <CameraPermissionChecker
        onPermissionGranted={startScan}
        checkOnMount={false}
      />
    </div>
  );
}
```

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `onPermissionGranted` | `() => void` | `undefined` | Called when camera permission is granted |
| `onPermissionDenied` | `() => void` | `undefined` | Called when camera permission is denied |
| `checkOnMount` | `boolean` | `true` | Whether to check camera permission when the component mounts |
| `showStatus` | `boolean` | `true` | Whether to show the permission status UI |

## Browser Compatibility

The component includes special handling for:

- Arc browser in incognito mode
- Safari on iOS
- General browser compatibility checks

## Integration with QR Scanner

This component is designed to work seamlessly with QR code scanners and other camera-based features:

```tsx
import { CameraPermissionChecker } from "@/components/camera-permission-checker";
import { QrReader } from "react-qr-reader";

function QrScanner() {
  const [isScanning, setIsScanning] = useState(false);
  
  return (
    <div>
      <CameraPermissionChecker
        onPermissionGranted={() => setIsScanning(true)}
        onPermissionDenied={() => console.log("Please enable camera access")}
      />
      
      {isScanning && (
        <QrReader
          constraints={{ facingMode: "environment" }}
          onResult={(result) => {
            if (result) {
              console.log("QR Code scanned:", result);
            }
          }}
        />
      )}
    </div>
  );
}
```
````

## File: src/components/glitchFx/glitchFx.tsx

````typescript
import React from 'react';
⋮----
interface GlitchFxProps {
  children?: React.ReactNode;
}
⋮----
export function GlitchFx(
````

## File: src/components/glitchFx/index.tsx

````typescript

````

## File: src/components/icons/BookMarked.tsx

````typescript
import {motion, useAnimation} from 'framer-motion'
import type {Variants} from 'framer-motion'
⋮----
interface BookMarkedProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
⋮----
const BookMarked = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}: BookMarkedProps) =>
⋮----
{/* Bouncing bookmark */}
⋮----
{/* Static book part */}
````

## File: src/components/icons/index.tsx

````typescript

````

## File: src/components/icons/info-card.tsx

````typescript
import {
  useState,
  useRef,
  useEffect,
  createContext,
  useContext,
  useMemo,
  useCallback,
} from 'react'
import {motion, AnimatePresence} from 'framer-motion'
import {cn} from '@/lib/utils'
import React from 'react'
⋮----
interface InfoCardTitleProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
}
⋮----
interface InfoCardDescriptionProps
  extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
}
⋮----
className=
⋮----
interface CommonCardProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
}
⋮----
interface InfoCardProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
  storageKey?: string
  dismissType?: 'once' | 'forever'
}
⋮----
type InfoCardContentProps = CommonCardProps
type InfoCardFooterProps = CommonCardProps
type InfoCardDismissProps = React.HTMLAttributes<HTMLDivElement> & {
  children: React.ReactNode
  onDismiss?: () => void
}
type InfoCardActionProps = CommonCardProps
⋮----
<div className=
⋮----
interface MediaItem {
  type?: 'image' | 'video'
  src: string
  alt?: string
  className?: string
  [key: string]: any
}
⋮----
interface InfoCardMediaProps extends React.HTMLAttributes<HTMLDivElement> {
  media: MediaItem[]
  loading?: 'eager' | 'lazy'
  shrinkHeight?: number
  expandHeight?: number
}
⋮----
const handleClick = (e: React.MouseEvent) =>
⋮----
const handleMediaLoad = (mediaSrc: string) =>
⋮----
setAllImagesLoaded(true) // No media to load
⋮----
const getRotation = (index: number) =>
⋮----
const getTranslateX = (index: number) =>
⋮----
const getTranslateY = (index: number) =>
⋮----
const getScale = (index: number) =>
````

## File: src/components/icons/Martini.tsx

````typescript
import type {Variants} from 'framer-motion'
import {animate, motion, useAnimation} from 'framer-motion'
⋮----
interface MartiniProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
````

## File: src/components/icons/PartyPopper.tsx

````typescript
import type {Variants} from 'framer-motion'
import {motion, useAnimation} from 'framer-motion'
⋮----
interface PartyPopperProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
⋮----
const PartyPopper = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}: PartyPopperProps) =>
````

## File: src/components/icons/Percent.tsx

````typescript
import type {Variants} from 'framer-motion'
import {motion, useAnimation} from 'framer-motion'
⋮----
interface PercentProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
````

## File: src/components/icons/Salad.tsx

````typescript
import type {Variants} from 'framer-motion'
import {motion, useAnimation} from 'framer-motion'
⋮----
interface SaladProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
⋮----
const Salad = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}: SaladProps) =>
⋮----
{/* Static bowl parts */}
⋮----
{/* Animated salad contents */}
````

## File: src/components/icons/ThumbsDown.tsx

````typescript
import type {Variants} from 'framer-motion'
import {motion, useAnimation} from 'framer-motion'
⋮----
interface ThumbsDownProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
⋮----
const ThumbsDown = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}: ThumbsDownProps) =>
````

## File: src/components/icons/ThumbsUp.tsx

````typescript
import type {Variants} from 'framer-motion'
import {motion, useAnimation} from 'framer-motion'
⋮----
interface ThumbsUpProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
⋮----
const ThumbsUp = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}: ThumbsUpProps) =>
````

## File: src/components/icons/Wine.tsx

````typescript
import type {Variants} from 'framer-motion'
import {motion, useAnimation} from 'framer-motion'
⋮----
interface WineProps extends React.SVGAttributes<SVGSVGElement> {
  width?: number
  height?: number
  strokeWidth?: number
  stroke?: string
}
⋮----
const Wine = ({
  width = 28,
  height = 28,
  strokeWidth = 2,
  stroke = '#ffffff',
  ...props
}: WineProps) =>
````

## File: src/components/kokonutui/btn-08.tsx

````typescript
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { useState } from "react";
import { Twitter, Facebook, Linkedin, Link } from "lucide-react";
⋮----
onMouseLeave=
````

## File: src/components/kokonutui/profile-02.tsx

````typescript
import { Button } from "@/components/ui/button";
import { Mail, Link as LinkIcon, MapPin, ExternalLink } from "lucide-react";
import Image from "next/image";
⋮----
interface Profile02Props {
    name?: string;
    role?: string;
    avatar?: string;
    location?: string;
    email?: string;
    website?: string;
    bio?: string;
}
⋮----
href={`https://${website}`}
````

## File: src/components/kokonutui/profile-04.tsx

````typescript
import { LogOut, Flame, Shield, ArrowUpRight } from "lucide-react";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
⋮----
interface Profile04Props {
    name: string;
    role: string;
    avatar: string;
    subscription?: string;
    email?: string;
    level?: number;
    currentExp?: number;
    maxExp?: number;
}
````

## File: src/components/motion-primitives/animated-group.tsx

````typescript
import type {ReactNode} from 'react'
import {motion, type Variants} from 'framer-motion'
import React from 'react'
⋮----
export type PresetType =
  | 'fade'
  | 'slide'
  | 'scale'
  | 'blur'
  | 'blur-slide'
  | 'zoom'
  | 'flip'
  | 'bounce'
  | 'rotate'
  | 'swing'
⋮----
export type AnimatedGroupProps = {
  children: ReactNode
  className?: string
  variants?: {
    container?: Variants
    item?: Variants
  }
  preset?: PresetType
  as?: React.ElementType
  asChild?: React.ElementType
}
⋮----
const addDefaultVariants = (variants: Variants) => (
⋮----
function AnimatedGroup({
  children,
  className,
  variants,
  preset,
  as = 'div',
  asChild = 'div',
}: AnimatedGroupProps)
````

## File: src/components/motion-primitives/animated-number.tsx

````typescript
import {cn} from '@/lib/utils'
import {
  motion,
  type SpringOptions,
  useInView,
  useSpring,
  useTransform,
} from 'framer-motion'
import {useEffect, useRef, useState} from 'react'
⋮----
// useEffect(() => {
//   if (isInView && num) {
//     setValue(Number(num))
//   }
// }, [isInView, num])
````

## File: src/components/nav/nav-scanner.tsx

````typescript
import { useEffect, useState } from "react";
import {
  Scanner,
  useDevices,
  outline,
  boundingBox,
  centerText,
} from "@yudiel/react-qr-scanner";
import { processQrScan } from "@/actions/scan-actions"
import { AnimatePresence, motion } from "framer-motion"
import { useRouter } from "next/navigation"
import { Spinner } from "@/components/ui/spinner"
import { CheckCircle } from "lucide-react"
⋮----
// QR scanning logic moved from NavScannerButton to Nav
⋮----
// Effect to ensure redirection happens after successful scan
⋮----
// Give time for modal to close and success message to show
⋮----
function getTracker()
⋮----
const handleScan = async (data: string) =>
⋮----
<select onChange=
````

## File: src/components/progress-indicator/index.tsx

````typescript

````

## File: src/components/progress-indicator/progress-indicator.tsx

````typescript
import {
  AnimatedNumber,
  AnimatedNumberInView,
} from '@/components/motion-primitives/animated-number'
import type {PunchCardWithRestaurant} from '@/types/api'
import {motion, useMotionValue, useSpring, useTransform} from 'framer-motion'
import React, {useEffect, useState} from 'react'
⋮----
interface ProgressIndicatorProps {
  punches: PunchCardWithRestaurant[]
}
⋮----
// // const display = useTransform(spring, (current: number) =>
// //   Math.round(current).toLocaleString()
// // )
⋮----
// // useEffect(() => {
// //   spring.set(value)
// // }, [spring, value])
⋮----
// const spring = useSpring(Number(value))
⋮----
// console.log('🚀 ~ spring:', spring)
⋮----
// const display = useTransform(spring, (current: number) =>
//   Math.round(current).toLocaleString()
// )
⋮----
// useEffect(() => {
//   spring.set(value)
// }, [spring, percentageProgress])
````

## File: src/components/ui/alert-dialog.tsx

````typescript
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
⋮----
function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>)
⋮----
function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>)
⋮----
function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>)
````

## File: src/components/ui/alert.tsx

````typescript
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
⋮----
className=
````

## File: src/components/ui/data-table.tsx

````typescript
// AlignUI Table v0.0.0
⋮----
import { cn } from "@/utils/cn";
⋮----
className=
⋮----
{/* to have space between thead and tbody */}
⋮----
<tr ref=
````

## File: src/components/ui/divider.tsx

````typescript
// AlignUI Divider v0.0.0
⋮----
import { tv, type VariantProps } from "@/utils/tv";
⋮----
// base
⋮----
// before
⋮----
// base
⋮----
// before
⋮----
// after
⋮----
// base
⋮----
// before
⋮----
// after
⋮----
// base
⋮----
// base
⋮----
function Divider({
 className,
 variant,
 ...rest
}: React.HTMLAttributes<HTMLDivElement> &
VariantProps<typeof dividerVariants>)
````

## File: src/components/ui/dropdown-menu.tsx

````typescript
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>)
⋮----
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>)
⋮----
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>)
⋮----
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>)
⋮----
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>)
⋮----
className=
⋮----
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>)
⋮----
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>)
⋮----
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>)
⋮----
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
})
````

## File: src/components/ui/form.tsx

````typescript
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"
⋮----
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
⋮----
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
⋮----
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) =>
⋮----
const useFormField = () =>
⋮----
type FormItemContextValue = {
  id: string
}
⋮----
function FormItem(
⋮----
className=
⋮----
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>)
⋮----
function FormControl(
⋮----
function FormMessage(
````

## File: src/components/ui/label.tsx

````typescript
import { cva, type VariantProps } from "class-variance-authority";
⋮----
import { cn } from "@/lib/utils";
````

## File: src/components/ui/progress.tsx

````typescript
import { cn } from "@/lib/utils"
⋮----
className=
````

## File: src/components/ui/select.tsx

````typescript
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>)
⋮----
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>)
⋮----
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>)
⋮----
function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>)
⋮----
className=
⋮----
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>)
⋮----
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>)
⋮----
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>)
````

## File: src/components/ui/separator.tsx

````typescript
import { cn } from "@/lib/utils"
````

## File: src/components/ui/skeleton.tsx

````typescript
import { cn } from "@/lib/utils"
⋮----
className=
````

## File: src/components/ui/sonner.tsx

````typescript
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
⋮----
const Toaster = (
````

## File: src/components/ui/spinner.tsx

````typescript
import { cn } from "@/lib/utils";
⋮----
interface SpinnerProps {
 size?: "sm" | "md" | "lg";
 className?: string;
}
````

## File: src/components/ui/switch.tsx

````typescript
import { cn } from "@/lib/utils"
⋮----
className=
````

## File: src/components/ui/textarea.tsx

````typescript
import { cn } from "@/lib/utils";
⋮----
export interface TextareaProps
 extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
````

## File: src/components/ui/tooltip.tsx

````typescript
import { cn } from "@/lib/utils"
````

## File: src/components/ui/visually-hidden.tsx

````typescript
import { cn } from "@/lib/utils";
⋮----
interface VisuallyHiddenProps extends React.HTMLAttributes<HTMLSpanElement> {}
⋮----
className=
````

## File: src/components/wallet-ui/index.ts

````typescript

````

## File: src/components/wallet-ui/index.tsx

````typescript

````

## File: src/components/wallet-ui/wallet-ui.stories.tsx

````typescript
import type {Meta, StoryObj} from '@storybook/react'
import {WalletUI} from './wallet-ui'
⋮----
type Story = StoryObj<typeof meta>
````

## File: src/components/wallet-ui/wallet-ui.tsx

````typescript
import {motion} from 'framer-motion'
import {CreditCard, Wallet} from 'lucide-react'
⋮----
{/* 半透明遮罩层 */}
⋮----
{/* Wallet Info */}
⋮----
{/* Cards Container */}
````

## File: src/components/button-drawer.tsx

````typescript
// BottomSheet.tsx
⋮----
import {Sheet} from '@silk-hq/components'
⋮----
const BottomSheet = ()
````

## File: src/components/logo.tsx

````typescript
import Image from "next/image";
⋮----
export const Logo = () =>
````

## File: src/components/UserButton.tsx

````typescript
import { UserButton as ClerkUserButton } from "@clerk/nextjs";
⋮----
export function UserButton()
````

## File: src/context/style-wrapper.tsx

````typescript
import {useMediaQuery} from 'usehooks-ts'
⋮----
export const StyleWrapper = (
````

## File: src/db/models/achievements/achievements.ts

````typescript
import { and, eq } from "drizzle-orm";
import { db } from "../../db";
import { achievements } from"@/db/drizzle/schema"
⋮----
export const getAchievements = async () =>
⋮----
export const getAchievementById = async (id: bigint) =>
⋮----
export const getAchievementsByUserId = async (userId: bigint) =>
⋮----
export const getAchievementsByType = async (type: string) =>
⋮----
export const getUserAchievementByType = async (
 userId: bigint,
 type: string,
) =>
⋮----
export const createAchievement = async (data: {
 userId: bigint;
 type: string;
 data?: Record<string, any>;
 unlockedAt?: Date;
}) =>
⋮----
export const updateAchievement = async (
 id: bigint,
 data: Partial<{
  data: Record<string, any>;
  unlockedAt: Date;
 }>,
) =>
⋮----
export const deleteAchievement = async (id: bigint) =>
````

## File: src/db/models/achievements/index.ts

````typescript

````

## File: src/db/models/leaderboard/leaderboard.ts

````typescript
import { sql } from "drizzle-orm";
import { db } from "../../db";
import { punchCards, users, restaurants } from"@/db/drizzle/schema"
import type {
 UserLeaderboardEntry,
 RestaurantLeaderboardEntry,
} from "@/types/api";
⋮----
/**
 * Get top users by punch card count
 */
export const getTopUsersByPunchCardCount = async (
 limit = 10,
): Promise<UserLeaderboardEntry[]> =>
⋮----
/**
 * Get popular restaurants by punch card count
 */
export const getPopularRestaurantsByPunchCardCount = async (
 limit = 10,
): Promise<RestaurantLeaderboardEntry[]> =>
````

## File: src/db/models/point-balances/index.ts

````typescript

````

## File: src/db/models/point-balances/point-balances.ts

````typescript
import { eq } from "drizzle-orm";
import { db } from "@/db/db";
import { pointBalances } from "@/db/drizzle/schema";
⋮----
export const getPointBalances = async () =>
⋮----
export const getPointBalanceById = async (id: bigint) =>
⋮----
export const getPointBalanceByUserId = async (userId: bigint) =>
⋮----
export const createPointBalance = async (data: {
 userId: bigint;
 points?: number;
}) =>
⋮----
export const updatePointBalance = async (
 id: bigint,
 data: Partial<{
  points: number;
 }>,
) =>
⋮----
export const adjustPointBalance = async (
 userId: bigint,
 adjustment: number,
) =>
⋮----
// Create new balance with adjustment if none exists
⋮----
points: Math.max(0, adjustment), // Ensure new balance isn't negative
⋮----
const newPoints = Math.max(0, balance.points + adjustment); // Ensure balance doesn't go below 0
⋮----
export const deletePointBalance = async (id: bigint) =>
````

## File: src/db/models/point-transfers/index.ts

````typescript

````

## File: src/db/models/point-transfers/point-transfers.ts

````typescript
import { eq, or } from "drizzle-orm";
import { db } from "@/db/db";
import { pointTransfers } from "@/db/drizzle/schema";
⋮----
export const getPointTransfers = async () =>
⋮----
export const getPointTransferById = async (id: bigint) =>
⋮----
export const getPointTransfersByUserId = async (userId: bigint) =>
⋮----
export const getSentPointTransfers = async (fromUserId: bigint) =>
⋮----
export const getReceivedPointTransfers = async (toUserId: bigint) =>
⋮----
export const getPointTransfersByStatus = async (status: string) =>
⋮----
export const createPointTransfer = async (data: {
 fromUserId: bigint;
 toUserId: bigint;
 points: number;
 message?: string;
 status: string;
}) =>
⋮----
export const updatePointTransfer = async (
 id: bigint,
 data: Partial<{
  status: string;
  message: string;
 }>,
) =>
⋮----
export const deletePointTransfer = async (id: bigint) =>
````

## File: src/db/models/prize-redemptions/index.ts

````typescript

````

## File: src/db/models/prize-redemptions/prize-redemptions.ts

````typescript
import { eq } from "drizzle-orm";
import { db } from "@/db/db";
import { prizeRedemptions } from "@/db/drizzle/schema";
⋮----
export const getPrizeRedemptions = async () =>
⋮----
export const getPrizeRedemptionById = async (id: bigint) =>
⋮----
export const getPrizeRedemptionsByUserId = async (userId: bigint) =>
⋮----
export const getPrizeRedemptionsByPrizeId = async (prizeId: bigint) =>
⋮----
export const getPrizeRedemptionsByPunchCardId = async (punchCardId: bigint) =>
⋮----
export const getPrizeRedemptionsByStatus = async (status: string) =>
⋮----
export const createPrizeRedemption = async (data: {
 userId: bigint;
 prizeId: bigint;
 punchCardId: bigint;
 status: string;
 redeemedAt?: Date;
 expiresAt?: Date;
}) =>
⋮----
export const updatePrizeRedemption = async (
 id: bigint,
 data: Partial<{
  status: string;
  redeemedAt: Date | null;
  expiresAt: Date | null;
 }>,
) =>
⋮----
export const deletePrizeRedemption = async (id: bigint) =>
````

## File: src/db/models/prizes/index.ts

````typescript

````

## File: src/db/models/prizes/prizes.ts

````typescript
import { eq } from "drizzle-orm";
import { db } from "@/db/db";
import { prizes } from "@/db/drizzle/schema";
⋮----
export const getPrizes = async () =>
⋮----
export const getPrizeById = async (id: bigint) =>
⋮----
export const getPrizesByRestaurantId = async (restaurantId: bigint) =>
⋮----
export const getAvailablePrizes = async () =>
⋮----
export const createPrize = async (data: {
 name: string;
 description: string;
 imageUrl: string;
 type: string;
 restaurantId: bigint;
 requiredPunches: number;
 available?: boolean;
 quantity?: number;
 rules?: Record<string, any>;
}) =>
⋮----
export const updatePrize = async (
 id: bigint,
 data: Partial<{
  name: string;
  description: string;
  imageUrl: string;
  type: string;
  requiredPunches: number;
  available: boolean;
  quantity: number;
  rules: Record<string, any>;
 }>,
) =>
⋮----
export const decrementPrizeQuantity = async (id: bigint) =>
⋮----
export const deletePrize = async (id: bigint) =>
````

## File: src/db/models/punch-cards/index.ts

````typescript

````

## File: src/db/models/raffle-entries/index.ts

````typescript

````

## File: src/db/models/raffle-entries/raffle-entries.ts

````typescript
import { eq } from "drizzle-orm";
import { db } from "@/db/db";
import { raffleEntries } from "@/db/drizzle/schema";
⋮----
export const getRaffleEntries = async () =>
⋮----
export const getRaffleEntryById = async (id: bigint) =>
⋮----
export const getRaffleEntriesByUserId = async (userId: bigint) =>
⋮----
export const getRaffleEntriesByPunchCardId = async (punchCardId: bigint) =>
⋮----
export const createRaffleEntry = async (data: {
 userId: bigint;
 punchCardId: bigint;
}) =>
⋮----
export const deleteRaffleEntry = async (id: bigint) =>
````

## File: src/db/models/restaurants/index.ts

````typescript

````

## File: src/db/models/users/index.ts

````typescript

````

## File: src/db/models/index.ts

````typescript

````

## File: src/db/index.ts

````typescript

````

## File: src/db/migrate.ts

````typescript
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
⋮----
const main = async () =>
````

## File: src/db/supabase.ts

````typescript
import { createClient } from "@supabase/supabase-js";
import { auth } from "@clerk/nextjs/server";
⋮----
// Helper function to convert bigint to string in JSON
⋮----
// For server-side usage
export async function getAuthenticatedSupabaseClient()
⋮----
// For client-side usage (in component)
export function createClerkSupabaseClient(
 getToken: () => Promise<string | null>,
)
````

## File: src/features/deals/index.ts

````typescript

````

## File: src/features/restaurants/AdminRestaurantSearchBar.tsx

````typescript
import type { ChangeEvent } from "react";
import { Search, ArrowUpDown } from "lucide-react";
import { Input } from "@/components/ui/input";
import {
 Select,
 SelectContent,
 SelectItem,
 SelectTrigger,
 SelectValue,
} from "@/components/ui/select";
import type { SortOption } from "@/hooks/useRestaurantSearch";
⋮----
export interface AdminRestaurantSearchBarProps {
 searchTerm: string;
 onSearchChange: (term: string) => void;
 sortOption: SortOption;
 onSortChange: (option: SortOption) => void;
 className?: string;
}
⋮----
export function AdminRestaurantSearchBar({
 searchTerm,
 onSearchChange,
 sortOption,
 onSortChange,
 className = "",
}: AdminRestaurantSearchBarProps)
⋮----
const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleSortChange = (value: string) =>
````

## File: src/features/restaurants/index.ts

````typescript

````

## File: src/features/restaurants/Restaurant.tsx

````typescript
import { getUserRestaurantPunchCard } from "@/db/models/punch-cards/punch-cards";
import { getRestaurantByIdWithPrizes } from "@/db/models/restaurants/restaurants";
import { getUserByClerkId } from "@/db/models/users/users";
import { RestaurantDetail } from "@/features/restaurants/restaurant-detail/RestaurantDetail";
import { RestaurantLoading } from "@/features/restaurants/RestaurantLoading";
import { auth } from "@clerk/nextjs/server";
import type { Suspense } from "react";
⋮----
// Get current user auth status
⋮----
// Main page component
export async function Restaurant(
⋮----
{/* <Link
     href="/restaurants"
     className="text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-2"
    >
     <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
     >
      <path d="M19 12H5M12 19l-7-7 7-7" />
     </svg>
     Back to Restaurants
    </Link>
   </div> */}
````

## File: src/features/restaurants/RestaurantLoading.tsx

````typescript

````

## File: src/features/restaurants/UserFacingRestaurantDetail.tsx

````typescript
import { getUserRestaurantPunchCard } from "@/db/models/punch-cards/punch-cards";
import {
 getRestaurantByIdWithAll,
 getRestaurantByIdWithPrizesAndDeals,
} from "@/db/models/restaurants/restaurants";
import { getUserByClerkId } from "@/db/models/users/users";
import { RestaurantDetail } from "@/features/restaurants/restaurant-detail/RestaurantDetail";
import { RestaurantLoading } from "@/features/restaurants/RestaurantLoading";
import { auth } from "@clerk/nextjs/server";
import type { Suspense } from "react";
⋮----
// Get current user auth status
⋮----
// Main page component
export async function UserFacingRestaurantDetail({
 params,
}: {
 params: { id: string };
})
⋮----
{/* <Link
     href="/restaurants"
     className="text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-2"
    >
     <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
     >
      <path d="M19 12H5M12 19l-7-7 7-7" />
     </svg>
     Back to Restaurants
    </Link>
   </div> */}
````

## File: src/features/users/passport/passport.css

````css
.punch {
⋮----
/* background: linear-gradient(
  to right,
  rgba(var(--primary), 0.9),
  var(--primary)
 ); */
/* -webkit-background-clip: text;
 background-clip: text;
 color: transparent; */
⋮----
.punch-overlay {
⋮----
/* -webkit-background-clip: text;
 background-clip: text;
 color: transparent;
 position: absolute;
 overflow: hidden;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 z-index: 0;
 background-color: lightblue; */
/* conic-gradient(at bottom left, #fff7ed, #1e3a1f); */
⋮----
.punch-overlay::before {
⋮----
/* content: attr(data-text); */
/* position: absolute;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 
 left: 0;
 width: 100%;
 height: 100%;

 background: conic-gradient(at bottom left, #fff7ed, #1e3a1f);

 -webkit-background-clip: text;
 background-clip: text;
 color: transparent;
 display: flex;
 align-items: center;
 align-content: center;
 justify-content: center;
 
 z-index: 10; */
````

## File: src/features/users/GetUserPunchCard.tsx

````typescript
import { getUserRestaurantPunchCard } from "@/db/models/punch-cards/punch-cards";
import { UserPunchCard } from "@/features/users/UserPunchCard";
import type { PunchCard, Restaurant } from "@/types/db";
import { use, useEffect, useState } from "react";
⋮----
export const GetUserRestaurantPunchCard = ({
 restaurant,
 userId,
}:
⋮----
// @ts-ignore
````

## File: src/features/users/share-punch-menu.tsx

````typescript
import Image from 'next/image'
⋮----
import {useEffect, useState} from 'react'
import {AnimatePresence, motion} from 'framer-motion'
import {
  FacebookIcon,
  Instagram,
  InstagramIcon,
  Share,
  TwitterIcon,
} from 'lucide-react'
⋮----
src={`https://api.dicebear.com/9.x/adventurer-neutral/svg?seed=${selected?.name}`}
⋮----
onMouseLeave=
onClick=
````

## File: src/hooks/use-handle-bulk-qr-code.tsx

````typescript
import { useHandleQRCode } from "./use-handle-qr-code";
import type { Restaurant } from "@/types/db";
⋮----
export const useHandleBulkQRCode = () =>
````

## File: src/hooks/use-handle-qr-code.tsx

````typescript
import {
 saveQRCodeUrl,
 saveBulkQRCodeUrls,
} from "@/app/admin/restaurants/actions";
import type { Restaurant } from "@/types/db";
import { useRef, useState, useCallback } from "react";
import JSZip from "jszip";
import { saveAs } from "file-saver";
⋮----
type QRCodeResult = {
 restaurantId: string;
 success: boolean;
 qrCodeDataUrl?: string;
};
⋮----
type UseHandleQRCodeProps =
 | { restaurant: Restaurant; mode: "single" }
 | { restaurants?: Restaurant[]; mode: "bulk" };
⋮----
export const useHandleQRCode = (props: UseHandleQRCodeProps) =>
⋮----
// Shared state
⋮----
// Single mode state
⋮----
// Bulk mode state
⋮----
// Get restaurant ID based on mode
⋮----
// Construct QR code value
⋮----
// Generate QR code SVG data URL
⋮----
// Create SVG QR code (simplified example)
⋮----
// Extract SVG data from a reference or data URL
⋮----
// If we have a data URL, try to use it directly
⋮----
// Handle both base64 and URL-encoded data
⋮----
// Fall through to SVG element approach
⋮----
// Use SVG element as fallback
⋮----
// Clone SVG to avoid modifying the original
⋮----
// Set attributes for better compatibility
⋮----
// Ensure background is white for better visibility
⋮----
// Serialize the SVG
⋮----
// Single mode: Generate QR code and show save/cancel buttons
⋮----
// Single mode: Cancel QR code generation
⋮----
// Single mode: Download QR code as image
⋮----
// Get data URL from existing value or SVG element
⋮----
// Handle download with browser compatibility
⋮----
// Only access props.restaurant when in single mode
⋮----
// Safari doesn't handle the download attribute well, open in new tab
⋮----
// For other browsers, use the standard approach
⋮----
// Single mode: Save QR code URL to database
⋮----
// Make sure we have a valid QR code to save
⋮----
// Get the SVG element
⋮----
// Generate data URL
⋮----
// Use safe encoding for all browsers
⋮----
// Modern approach - safer for all characters
⋮----
// Fallback to base64 encoding
⋮----
// Save to database - only access props.restaurant when in single mode
⋮----
// Bulk mode: Toggle selection of a single restaurant
⋮----
// Bulk mode: Select/deselect all restaurants
⋮----
// Bulk mode: Generate QR codes for all selected restaurants
⋮----
// Generate QR code data URL
⋮----
// Update progress
⋮----
// If restaurants were passed in, update the internal selection state
⋮----
// Bulk mode: Save all generated QR codes to the database
⋮----
// Filter out any entries without data URLs
⋮----
// Bulk mode: Download all generated QR codes as a ZIP file
⋮----
// Process each result
⋮----
// Use the SVG data directly
⋮----
// Try to extract SVG data
⋮----
// Fall back to blob approach
⋮----
// Create a blob from the data URL
⋮----
// Add to zip using the raw blob data
⋮----
// Generate the ZIP file
⋮----
// Provide feedback
⋮----
// Bulk mode: Reset the state
⋮----
// Return appropriate props based on mode
````

## File: src/hooks/use-server-sent-event.tsx

````typescript
import { useState, useEffect, useCallback, useRef } from "react";
⋮----
export type SseMessage = {
 type: string;
 payload: Record<string, unknown>;
};
⋮----
export function useServerSentEvent(endpoint = "/api/sse")
⋮----
// Initialize SSE connection
⋮----
// Only run on client side
⋮----
// Create EventSource connection
⋮----
// Connection opened
⋮----
// Connection error
⋮----
// Try to reconnect after a delay
⋮----
// The effect cleanup will run and the effect will re-run,
// creating a new connection
⋮----
// Handle incoming messages
⋮----
// Notify all listeners
⋮----
// Clean up on unmount
⋮----
// Add message listener
⋮----
// Return function to remove listener
⋮----
// Send message to server (using fetch since SSE is one-way)
````

## File: src/hooks/use-toast.tsx

````typescript
import { useState } from "react";
⋮----
interface ToastProps {
 title?: string;
 description?: string;
 variant?: "default" | "destructive";
}
⋮----
interface Toast extends ToastProps {
 id: string;
}
⋮----
export function useToast()
⋮----
const toast = (props: ToastProps) =>
⋮----
// Auto-dismiss after 3 seconds
````

## File: src/hooks/use-websocket.tsx

````typescript
import { useState, useEffect, useRef, useCallback } from "react";
⋮----
export type WsMessage = {
 type: string;
 payload: Record<string, unknown>;
};
⋮----
export function useWebSocket()
⋮----
// Get WebSocket URL from environment or use a default
⋮----
// Create WebSocket connection
⋮----
// Connection opened
⋮----
// Connection closed
⋮----
// Connection error
⋮----
// Clean up on unmount
⋮----
// Send message function
````

## File: src/hooks/useRestaurantSearch.tsx

````typescript
import { useState, useMemo } from "react";
import type { Restaurant } from "@/types/db";
import Fuse from "fuse.js";
import type { FuseResult } from "fuse.js";
⋮----
export type SortOption = "name-asc" | "name-desc";
⋮----
interface UseRestaurantSearchProps {
 restaurants: Restaurant[];
 initialSortOption?: SortOption;
 hasDeals?: boolean;
}
⋮----
interface UseRestaurantSearchResult {
 filteredRestaurants: Restaurant[];
 searchTerm: string;
 setSearchTerm: (term: string) => void;
 sortOption: SortOption;
 setSortOption: (option: SortOption) => void;
 isSearching: boolean;
 hasDeals: boolean;
 setHasDeals: (hasDeals: boolean) => void;
}
⋮----
export const useRestaurantSearch = ({
 restaurants,
 initialSortOption = "name-asc",
 hasDeals: initialHasDeals = false,
}: UseRestaurantSearchProps): UseRestaurantSearchResult =>
⋮----
// Initialize Fuse.js for fuzzy search
⋮----
// Apply search and sorting
⋮----
// Apply deals filter if enabled
⋮----
// Apply fuzzy search if search term exists
⋮----
// Apply sorting
⋮----
return b.name.localeCompare(a.name); // name-desc
⋮----
// Determine if search is active
````

## File: src/lib/constants.ts

````typescript

````

## File: src/lib/csv.ts

````typescript
/**
 * Utility functions for CSV export and handling
 */
⋮----
/**
 * Convert an array of objects to CSV string
 * @param data Array of objects to convert
 * @param columns Optional array of column names to include
 * @returns CSV formatted string
 */
export function convertToCSV<T extends Record<string, unknown>>(
 data: T[],
 columns?: (keyof T)[],
): string
⋮----
// Exit if no data
⋮----
// Determine columns to use - either provided columns or all keys from first object
⋮----
// Create header row
⋮----
// Create data rows
⋮----
// Handle different data types appropriately
⋮----
// Combine header and data rows
⋮----
/**
 * Export data as a CSV file
 * @param data Array of objects to export
 * @param filename Name of the CSV file
 * @param columns Optional array of column names to include
 */
export function exportToCSV<T extends Record<string, unknown>>(
 data: T[],
 filename: string,
 columns?: (keyof T)[],
): void
⋮----
// Generate CSV string
⋮----
// Create blob with proper MIME type
⋮----
// Create download link
⋮----
// Create file URL
⋮----
// Set link properties
⋮----
// Add to DOM
⋮----
// Trigger download
⋮----
// Clean up
⋮----
/**
 * Parse and validate a CSV file
 * @param file CSV file to parse
 * @param requiredColumns Array of required column names
 * @returns Promise that resolves to parsed data if valid, or rejects with an error
 */
export async function parseCSV<T extends Record<string, unknown>>(
 file: File,
 requiredColumns: string[],
): Promise<T[]>
⋮----
// Parse header row (removing quotes if present)
⋮----
// Validate required columns
⋮----
// Parse data rows
⋮----
/**
 * Parse a CSV line respecting quoted values that may contain commas
 * @param line CSV line to parse
 * @returns Array of values
 */
function parseCSVLine(line: string): string[]
⋮----
// Double quotes inside quotes - add a single quote
⋮----
i++; // Skip the next quote
⋮----
// Toggle quote mode
⋮----
// End of value
⋮----
// Normal character
⋮----
// Don't forget the last value
⋮----
// Remove surrounding quotes if present
````

## File: src/lib/svg-to-data-url.ts

````typescript
/* src/lib/svg-to-data-url.ts */
⋮----
/**
 * Converts a QR code SVG string to a data URL.
 * Handles both server-side (Node.js) and client-side conversion.
 * 
 * @param svg - The QR code SVG content as a string
 * @returns A data URL representing the SVG image
 */
export const svgToDataURL = (svg: string): string =>
⋮----
// Server-side: use Node's Buffer for base64 encoding
⋮----
// Client-side: use btoa after proper encoding
````

## File: src/stories/assets/accessibility.svg

````
<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="none" viewBox="0 0 48 48"><title>Accessibility</title><circle cx="24.334" cy="24" r="24" fill="#A849FF" fill-opacity=".3"/><path fill="#A470D5" fill-rule="evenodd" d="M27.8609 11.585C27.8609 9.59506 26.2497 7.99023 24.2519 7.99023C22.254 7.99023 20.6429 9.65925 20.6429 11.585C20.6429 13.575 22.254 15.1799 24.2519 15.1799C26.2497 15.1799 27.8609 13.575 27.8609 11.585ZM21.8922 22.6473C21.8467 23.9096 21.7901 25.4788 21.5897 26.2771C20.9853 29.0462 17.7348 36.3314 17.3325 37.2275C17.1891 37.4923 17.1077 37.7955 17.1077 38.1178C17.1077 39.1519 17.946 39.9902 18.9802 39.9902C19.6587 39.9902 20.253 39.6293 20.5814 39.0889L20.6429 38.9874L24.2841 31.22C24.2841 31.22 27.5529 37.9214 27.9238 38.6591C28.2948 39.3967 28.8709 39.9902 29.7168 39.9902C30.751 39.9902 31.5893 39.1519 31.5893 38.1178C31.5893 37.7951 31.3639 37.2265 31.3639 37.2265C30.9581 36.3258 27.698 29.0452 27.0938 26.2771C26.8975 25.4948 26.847 23.9722 26.8056 22.7236C26.7927 22.333 26.7806 21.9693 26.7653 21.6634C26.7008 21.214 27.0231 20.8289 27.4097 20.7005L35.3366 18.3253C36.3033 18.0685 36.8834 16.9773 36.6256 16.0144C36.3678 15.0515 35.2722 14.4737 34.3055 14.7305C34.3055 14.7305 26.8619 17.1057 24.2841 17.1057C21.7062 17.1057 14.456 14.7947 14.456 14.7947C13.4893 14.5379 12.3937 14.9873 12.0715 15.9502C11.7493 16.9131 12.3293 18.0044 13.3604 18.3253L21.2873 20.7005C21.674 20.8289 21.9318 21.214 21.9318 21.6634C21.9174 21.9493 21.9053 22.2857 21.8922 22.6473Z" clip-rule="evenodd"/></svg>
````

## File: src/stories/assets/discord.svg

````
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177575)"><mask id="mask0_10031_177575" style="mask-type:luminance" width="33" height="25" x="0" y="4" maskUnits="userSpaceOnUse"><path fill="#fff" d="M32.5034 4.00195H0.503906V28.7758H32.5034V4.00195Z"/></mask><g mask="url(#mask0_10031_177575)"><path fill="#5865F2" d="M27.5928 6.20817C25.5533 5.27289 23.3662 4.58382 21.0794 4.18916C21.0378 4.18154 20.9962 4.20057 20.9747 4.23864C20.6935 4.73863 20.3819 5.3909 20.1637 5.90358C17.7042 5.53558 15.2573 5.53558 12.8481 5.90358C12.6299 5.37951 12.307 4.73863 12.0245 4.23864C12.003 4.20184 11.9614 4.18281 11.9198 4.18916C9.63431 4.58255 7.44721 5.27163 5.40641 6.20817C5.38874 6.21578 5.3736 6.22848 5.36355 6.24497C1.21508 12.439 0.078646 18.4809 0.636144 24.4478C0.638667 24.477 0.655064 24.5049 0.677768 24.5227C3.41481 26.5315 6.06609 27.7511 8.66815 28.5594C8.70979 28.5721 8.75392 28.5569 8.78042 28.5226C9.39594 27.6826 9.94461 26.7968 10.4151 25.8653C10.4428 25.8107 10.4163 25.746 10.3596 25.7244C9.48927 25.3945 8.66058 24.9922 7.86343 24.5354C7.80038 24.4986 7.79533 24.4084 7.85333 24.3653C8.02108 24.2397 8.18888 24.109 8.34906 23.977C8.37804 23.9529 8.41842 23.9478 8.45249 23.963C13.6894 26.3526 19.359 26.3526 24.5341 23.963C24.5682 23.9465 24.6086 23.9516 24.6388 23.9757C24.799 24.1077 24.9668 24.2397 25.1358 24.3653C25.1938 24.4084 25.19 24.4986 25.127 24.5354C24.3298 25.0011 23.5011 25.3945 22.6296 25.7232C22.5728 25.7447 22.5476 25.8107 22.5754 25.8653C23.0559 26.7955 23.6046 27.6812 24.2087 28.5213C24.234 28.5569 24.2794 28.5721 24.321 28.5594C26.9357 27.7511 29.5869 26.5315 32.324 24.5227C32.348 24.5049 32.3631 24.4783 32.3656 24.4491C33.0328 17.5506 31.2481 11.5584 27.6344 6.24623C27.6256 6.22848 27.6105 6.21578 27.5928 6.20817ZM11.1971 20.8146C9.62043 20.8146 8.32129 19.3679 8.32129 17.5913C8.32129 15.8146 9.59523 14.368 11.1971 14.368C12.8115 14.368 14.0981 15.8273 14.0729 17.5913C14.0729 19.3679 12.7989 20.8146 11.1971 20.8146ZM21.8299 20.8146C20.2533 20.8146 18.9541 19.3679 18.9541 17.5913C18.9541 15.8146 20.228 14.368 21.8299 14.368C23.4444 14.368 24.7309 15.8273 24.7057 17.5913C24.7057 19.3679 23.4444 20.8146 21.8299 20.8146Z"/></g></g><defs><clipPath id="clip0_10031_177575"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
````

## File: src/stories/assets/github.svg

````
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#161614" d="M16.0001 0C7.16466 0 0 7.17472 0 16.0256C0 23.1061 4.58452 29.1131 10.9419 31.2322C11.7415 31.3805 12.0351 30.8845 12.0351 30.4613C12.0351 30.0791 12.0202 28.8167 12.0133 27.4776C7.56209 28.447 6.62283 25.5868 6.62283 25.5868C5.89499 23.7345 4.8463 23.2419 4.8463 23.2419C3.39461 22.2473 4.95573 22.2678 4.95573 22.2678C6.56242 22.3808 7.40842 23.9192 7.40842 23.9192C8.83547 26.3691 11.1514 25.6609 12.0645 25.2514C12.2081 24.2156 12.6227 23.5087 13.0803 23.1085C9.52648 22.7032 5.7906 21.3291 5.7906 15.1886C5.7906 13.4389 6.41563 12.0094 7.43916 10.8871C7.27303 10.4834 6.72537 8.85349 7.59415 6.64609C7.59415 6.64609 8.93774 6.21539 11.9953 8.28877C13.2716 7.9337 14.6404 7.75563 16.0001 7.74953C17.3599 7.75563 18.7297 7.9337 20.0084 8.28877C23.0623 6.21539 24.404 6.64609 24.404 6.64609C25.2749 8.85349 24.727 10.4834 24.5608 10.8871C25.5868 12.0094 26.2075 13.4389 26.2075 15.1886C26.2075 21.3437 22.4645 22.699 18.9017 23.0957C19.4756 23.593 19.9869 24.5683 19.9869 26.0634C19.9869 28.2077 19.9684 29.9334 19.9684 30.4613C19.9684 30.8877 20.2564 31.3874 21.0674 31.2301C27.4213 29.1086 32 23.1037 32 16.0256C32 7.17472 24.8364 0 16.0001 0ZM5.99257 22.8288C5.95733 22.9084 5.83227 22.9322 5.71834 22.8776C5.60229 22.8253 5.53711 22.7168 5.57474 22.6369C5.60918 22.5549 5.7345 22.5321 5.85029 22.587C5.9666 22.6393 6.03284 22.7489 5.99257 22.8288ZM6.7796 23.5321C6.70329 23.603 6.55412 23.5701 6.45291 23.4581C6.34825 23.3464 6.32864 23.197 6.40601 23.125C6.4847 23.0542 6.62937 23.0874 6.73429 23.1991C6.83895 23.3121 6.85935 23.4605 6.7796 23.5321ZM7.31953 24.4321C7.2215 24.5003 7.0612 24.4363 6.96211 24.2938C6.86407 24.1513 6.86407 23.9804 6.96422 23.9119C7.06358 23.8435 7.2215 23.905 7.32191 24.0465C7.41968 24.1914 7.41968 24.3623 7.31953 24.4321ZM8.23267 25.4743C8.14497 25.5712 7.95818 25.5452 7.82146 25.413C7.68156 25.2838 7.64261 25.1004 7.73058 25.0035C7.81934 24.9064 8.00719 24.9337 8.14497 25.0648C8.28381 25.1938 8.3262 25.3785 8.23267 25.4743ZM9.41281 25.8262C9.37413 25.9517 9.19423 26.0088 9.013 25.9554C8.83203 25.9005 8.7136 25.7535 8.75016 25.6266C8.78778 25.5003 8.96848 25.4408 9.15104 25.4979C9.33174 25.5526 9.45044 25.6985 9.41281 25.8262ZM10.7559 25.9754C10.7604 26.1076 10.6067 26.2172 10.4165 26.2196C10.2252 26.2238 10.0704 26.1169 10.0683 25.9868C10.0683 25.8534 10.2185 25.7448 10.4098 25.7416C10.6001 25.7379 10.7559 25.8441 10.7559 25.9754ZM12.0753 25.9248C12.0981 26.0537 11.9658 26.1862 11.7769 26.2215C11.5912 26.2554 11.4192 26.1758 11.3957 26.0479C11.3726 25.9157 11.5072 25.7833 11.6927 25.7491C11.8819 25.7162 12.0512 25.7937 12.0753 25.9248Z"/></svg>
````

## File: src/stories/assets/tutorials.svg

````
<svg xmlns="http://www.w3.org/2000/svg" width="33" height="32" fill="none" viewBox="0 0 33 32"><g clip-path="url(#clip0_10031_177597)"><path fill="#B7F0EF" fill-rule="evenodd" d="M17 7.87059C17 6.48214 17.9812 5.28722 19.3431 5.01709L29.5249 2.99755C31.3238 2.64076 33 4.01717 33 5.85105V22.1344C33 23.5229 32.0188 24.7178 30.6569 24.9879L20.4751 27.0074C18.6762 27.3642 17 25.9878 17 24.1539L17 7.87059Z" clip-rule="evenodd" opacity=".7"/><path fill="#87E6E5" fill-rule="evenodd" d="M1 5.85245C1 4.01857 2.67623 2.64215 4.47507 2.99895L14.6569 5.01848C16.0188 5.28861 17 6.48354 17 7.87198V24.1553C17 25.9892 15.3238 27.3656 13.5249 27.0088L3.34311 24.9893C1.98119 24.7192 1 23.5242 1 22.1358V5.85245Z" clip-rule="evenodd"/><path fill="#61C1FD" fill-rule="evenodd" d="M15.543 5.71289C15.543 5.71289 16.8157 5.96289 17.4002 6.57653C17.9847 7.19016 18.4521 9.03107 18.4521 9.03107C18.4521 9.03107 18.4521 25.1106 18.4521 26.9629C18.4521 28.8152 19.3775 31.4174 19.3775 31.4174L17.4002 28.8947L16.2575 31.4174C16.2575 31.4174 15.543 29.0765 15.543 27.122C15.543 25.1674 15.543 5.71289 15.543 5.71289Z" clip-rule="evenodd"/></g><defs><clipPath id="clip0_10031_177597"><rect width="32" height="32" fill="#fff" transform="translate(0.5)"/></clipPath></defs></svg>
````

## File: src/stories/assets/youtube.svg

````
<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="none" viewBox="0 0 32 32"><path fill="#ED1D24" d="M31.3313 8.44657C30.9633 7.08998 29.8791 6.02172 28.5022 5.65916C26.0067 5.00026 16 5.00026 16 5.00026C16 5.00026 5.99333 5.00026 3.4978 5.65916C2.12102 6.02172 1.03665 7.08998 0.668678 8.44657C0 10.9053 0 16.0353 0 16.0353C0 16.0353 0 21.1652 0.668678 23.6242C1.03665 24.9806 2.12102 26.0489 3.4978 26.4116C5.99333 27.0703 16 27.0703 16 27.0703C16 27.0703 26.0067 27.0703 28.5022 26.4116C29.8791 26.0489 30.9633 24.9806 31.3313 23.6242C32 21.1652 32 16.0353 32 16.0353C32 16.0353 32 10.9053 31.3313 8.44657Z"/><path fill="#fff" d="M12.7266 20.6934L21.0902 16.036L12.7266 11.3781V20.6934Z"/></svg>
````

## File: src/stories/button.css

````css
.storybook-button {
.storybook-button--primary {
.storybook-button--secondary {
.storybook-button--small {
.storybook-button--medium {
.storybook-button--large {
````

## File: src/stories/Button.stories.ts

````typescript
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';
⋮----
import { Button } from './Button';
⋮----
// More on how to set up stories at: https://storybook.js.org/docs/writing-stories#default-export
⋮----
// Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/configure/story-layout
⋮----
// This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
⋮----
// More on argTypes: https://storybook.js.org/docs/api/argtypes
⋮----
// Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args
⋮----
type Story = StoryObj<typeof meta>;
⋮----
// More on writing stories with args: https://storybook.js.org/docs/writing-stories/args
````

## File: src/stories/Button.tsx

````typescript
import React from 'react';
⋮----
export interface ButtonProps {
  /** Is this the principal call to action on the page? */
  primary?: boolean;
  /** What background color to use */
  backgroundColor?: string;
  /** How large should the button be? */
  size?: 'small' | 'medium' | 'large';
  /** Button contents */
  label: string;
  /** Optional click handler */
  onClick?: () => void;
}
⋮----
/** Is this the principal call to action on the page? */
⋮----
/** What background color to use */
⋮----
/** How large should the button be? */
⋮----
/** Button contents */
⋮----
/** Optional click handler */
⋮----
/** Primary UI component for user interaction */
export const Button = ({
  primary = false,
  size = 'medium',
  backgroundColor,
  label,
  ...props
}: ButtonProps) =>
````

## File: src/stories/Configure.mdx

````
import { Meta } from "@storybook/blocks";
import Image from "next/image";

import Github from "./assets/github.svg";
import Discord from "./assets/discord.svg";
import Youtube from "./assets/youtube.svg";
import Tutorials from "./assets/tutorials.svg";
import Styling from "./assets/styling.png";
import Context from "./assets/context.png";
import Assets from "./assets/assets.png";
import Docs from "./assets/docs.png";
import Share from "./assets/share.png";
import FigmaPlugin from "./assets/figma-plugin.png";
import Testing from "./assets/testing.png";
import Accessibility from "./assets/accessibility.png";
import Theming from "./assets/theming.png";
import AddonLibrary from "./assets/addon-library.png";

export const RightArrow = () => <svg 
    viewBox="0 0 14 14" 
    width="8px" 
    height="14px" 
    style={{ 
      marginLeft: '4px',
      display: 'inline-block',
      shapeRendering: 'inherit',
      verticalAlign: 'middle',
      fill: 'currentColor',
      'path fill': 'currentColor'
    }}
>
  <path d="m11.1 7.35-5.5 5.5a.5.5 0 0 1-.7-.7L10.04 7 4.9 1.85a.5.5 0 1 1 .7-.7l5.5 5.5c.2.2.2.5 0 .7Z" />
</svg>

<Meta title="Configure your project" />

<div className="sb-container">
  <div className='sb-section-title'>
    # Configure your project

    Because Storybook works separately from your app, you'll need to configure it for your specific stack and setup. Below, explore guides for configuring Storybook with popular frameworks and tools. If you get stuck, learn how you can ask for help from our community.
  </div>
  <div className="sb-section">
    <div className="sb-section-item">
      <Image
        src={Styling}
        alt="A wall of logos representing different styling technologies"
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
      />
      <h4 className="sb-section-item-heading">Add styling and CSS</h4>
      <p className="sb-section-item-paragraph">Like with web applications, there are many ways to include CSS within Storybook. Learn more about setting up styling within Storybook.</p>
      <a
        href="https://storybook.js.org/docs/configure/styling-and-css/?renderer=react"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }}
        src={Context}
        alt="An abstraction representing the composition of data for a component"
      />
      <h4 className="sb-section-item-heading">Provide context and mocking</h4>
      <p className="sb-section-item-paragraph">Often when a story doesn't render, it's because your component is expecting a specific environment or context (like a theme provider) to be available.</p>
      <a
        href="https://storybook.js.org/docs/writing-stories/decorators/?renderer=react#context-for-mocking"
        target="_blank"
      >Learn more<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={0}
        height={0}
        style={{ width: '100%', height: 'auto' }} 
        src={Assets} 
        alt="A representation of typography and image assets" 
      />
      <div>
        <h4 className="sb-section-item-heading">Load assets and resources</h4>
        <p className="sb-section-item-paragraph">To link static files (like fonts) to your projects and stories, use the
        `staticDirs` configuration option to specify folders to load when
        starting Storybook.</p>
        <a
          href="https://storybook.js.org/docs/configure/images-and-assets/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className="sb-container">
  <div className='sb-section-title'>
    # Do more with Storybook

    Now that you know the basics, let's explore other parts of Storybook that will improve your experience. This list is just to get you started. You can customise Storybook in many ways to fit your needs.
  </div>

  <div className="sb-section">
    <div className="sb-features-grid">
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Docs} 
          alt="A screenshot showing the autodocs tag being set, pointing a docs page being generated" 
        />
        <h4 className="sb-section-item-heading">Autodocs</h4>
        <p className="sb-section-item-paragraph">Auto-generate living,
          interactive reference documentation from your components and stories.</p>
        <a
          href="https://storybook.js.org/docs/writing-docs/autodocs/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Share} 
          alt="A browser window showing a Storybook being published to a chromatic.com URL" 
        />
        <h4 className="sb-section-item-heading">Publish to Chromatic</h4>
        <p className="sb-section-item-paragraph">Publish your Storybook to review and collaborate with your entire team.</p>
        <a
          href="https://storybook.js.org/docs/sharing/publish-storybook/?renderer=react#publish-storybook-with-chromatic"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={FigmaPlugin} 
          alt="Windows showing the Storybook plugin in Figma" 
        />
        <h4 className="sb-section-item-heading">Figma Plugin</h4>
        <p className="sb-section-item-paragraph">Embed your stories into Figma to cross-reference the design and live
          implementation in one place.</p>
        <a
          href="https://storybook.js.org/docs/sharing/design-integrations/?renderer=react#embed-storybook-in-figma-with-the-plugin"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Testing} 
          alt="Screenshot of tests passing and failing" 
        />
        <h4 className="sb-section-item-heading">Testing</h4>
        <p className="sb-section-item-paragraph">Use stories to test a component in all its variations, no matter how
          complex.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Accessibility} 
          alt="Screenshot of accessibility tests passing and failing" 
        />
        <h4 className="sb-section-item-heading">Accessibility</h4>
        <p className="sb-section-item-paragraph">Automatically test your components for a11y issues as you develop.</p>
        <a
          href="https://storybook.js.org/docs/writing-tests/accessibility-testing/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
      <div className="sb-grid-item">
        <Image 
          width={0}
          height={0}
          style={{ width: '100%', height: 'auto' }} 
          src={Theming} 
          alt="Screenshot of Storybook in light and dark mode" 
        />
        <h4 className="sb-section-item-heading">Theming</h4>
        <p className="sb-section-item-paragraph">Theme Storybook's UI to personalize it to your project.</p>
        <a
          href="https://storybook.js.org/docs/configure/theming/?renderer=react"
          target="_blank"
        >Learn more<RightArrow /></a>
      </div>
    </div>
  </div>
</div>
<div className='sb-addon'>
  <div className='sb-addon-text'>
    <h4>Addons</h4>
    <p className="sb-section-item-paragraph">Integrate your tools with Storybook to connect workflows.</p>
    <a
        href="https://storybook.js.org/addons/"
        target="_blank"
      >Discover all addons<RightArrow /></a>
  </div>
  <div className='sb-addon-img'>
    <Image 
      width={650}
      height={347}
      src={AddonLibrary} 
      alt="Integrate your tools with Storybook to connect workflows." 
    />
  </div>
</div>

<div className="sb-section sb-socials">
    <div className="sb-section-item">
      <Image 
        width={32}
        height={32}
        layout="fixed"
        src={Github} 
        alt="Github logo" 
        className="sb-explore-image"
      />
      Join our contributors building the future of UI development.

      <a
        href="https://github.com/storybookjs/storybook"
        target="_blank"
      >Star on GitHub<RightArrow /></a>
    </div>
    <div className="sb-section-item">
      <Image 
        width={33}
        height={32}
        layout="fixed"
        src={Discord} 
        alt="Discord logo" 
        className="sb-explore-image"
      />
      <div>
        Get support and chat with frontend developers.

        <a
          href="https://discord.gg/storybook"
          target="_blank"
        >Join Discord server<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <Image 
        width={32}
        height={32}
        layout="fixed"
        src={Youtube} 
        alt="Youtube logo" 
        className="sb-explore-image"
      />
      <div>
        Watch tutorials, feature previews and interviews.

        <a
          href="https://www.youtube.com/@chromaticui"
          target="_blank"
        >Watch on YouTube<RightArrow /></a>
      </div>
    </div>
    <div className="sb-section-item">
      <Image 
        width={33}
        height={32}
        layout="fixed"
        src={Tutorials} 
        alt="A book" 
        className="sb-explore-image"
      />
      <p>Follow guided walkthroughs on for key workflows.</p>

      <a
          href="https://storybook.js.org/tutorials/"
          target="_blank"
        >Discover tutorials<RightArrow /></a>
    </div>
</div>

<style>
  {`
  .sb-container {
    margin-bottom: 48px;
  }

  .sb-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  img {
    object-fit: cover;
  }

  .sb-section-title {
    margin-bottom: 32px;
  }

  .sb-section a:not(h1 a, h2 a, h3 a) {
    font-size: 14px;
  }

  .sb-section-item, .sb-grid-item {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .sb-section-item-heading {
    padding-top: 20px !important;
    padding-bottom: 5px !important;
    margin: 0 !important;
  }
  .sb-section-item-paragraph {
    margin: 0;
    padding-bottom: 10px;
  }

  .sb-chevron {
    margin-left: 5px;
  }

  .sb-features-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 32px 20px;
  }

  .sb-socials {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }

  .sb-socials p {
    margin-bottom: 10px;
  }

  .sb-explore-image {
    max-height: 32px;
    align-self: flex-start;
  }

  .sb-addon {
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    background-color: #EEF3F8;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0.05);
    background: #EEF3F8;
    height: 180px;
    margin-bottom: 48px;
    overflow: hidden;
  }

  .sb-addon-text {
    padding-left: 48px;
    max-width: 240px;
  }

  .sb-addon-text h4 {
    padding-top: 0px;
  }

  .sb-addon-img {
    position: absolute;
    left: 345px;
    top: 0;
    height: 100%;
    width: 200%;
    overflow: hidden;
  }

  .sb-addon-img img {
    width: 650px;
    transform: rotate(-15deg);
    margin-left: 40px;
    margin-top: -72px;
    box-shadow: 0 0 1px rgba(255, 255, 255, 0);
    backface-visibility: hidden;
  }

  @media screen and (max-width: 800px) {
    .sb-addon-img {
      left: 300px;
    }
  }

  @media screen and (max-width: 600px) {
    .sb-section {
      flex-direction: column;
    }

    .sb-features-grid {
      grid-template-columns: repeat(1, 1fr);
    }

    .sb-socials {
      grid-template-columns: repeat(2, 1fr);
    }

    .sb-addon {
      height: 280px;
      align-items: flex-start;
      padding-top: 32px;
      overflow: hidden;
    }

    .sb-addon-text {
      padding-left: 24px;
    }

    .sb-addon-img {
      right: 0;
      left: 0;
      top: 130px;
      bottom: 0;
      overflow: hidden;
      height: auto;
      width: 124%;
    }

    .sb-addon-img img {
      width: 1200px;
      transform: rotate(-12deg);
      margin-left: 0;
      margin-top: 48px;
      margin-bottom: -40px;
      margin-left: -24px;
    }
  }
  `}
</style>
````

## File: src/stories/header.css

````css
.storybook-header {
⋮----
.storybook-header svg {
⋮----
.storybook-header h1 {
⋮----
.storybook-header button + button {
⋮----
.storybook-header .welcome {
````

## File: src/stories/Header.stories.ts

````typescript
import type { Meta, StoryObj } from '@storybook/react';
import { fn } from '@storybook/test';
⋮----
import { Header } from './Header';
⋮----
// This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs
⋮----
// More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
⋮----
type Story = StoryObj<typeof meta>;
````

## File: src/stories/Header.tsx

````typescript
import React from 'react';
⋮----
import { Button } from './Button';
⋮----
type User = {
  name: string;
};
⋮----
export interface HeaderProps {
  user?: User;
  onLogin?: () => void;
  onLogout?: () => void;
  onCreateAccount?: () => void;
}
⋮----
<svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
````

## File: src/stories/page.css

````css
.storybook-page {
⋮----
.storybook-page h2 {
⋮----
.storybook-page p {
⋮----
.storybook-page a {
⋮----
.storybook-page ul {
⋮----
.storybook-page li {
⋮----
.storybook-page .tip {
⋮----
.storybook-page .tip-wrapper {
⋮----
.storybook-page .tip-wrapper svg {
⋮----
.storybook-page .tip-wrapper svg path {
````

## File: src/stories/Page.stories.ts

````typescript
import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';
⋮----
import { Page } from './Page';
⋮----
// More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
⋮----
type Story = StoryObj<typeof meta>;
⋮----
// More on component testing: https://storybook.js.org/docs/writing-tests/component-testing
````

## File: src/stories/Page.tsx

````typescript
import React from 'react';
⋮----
import { Header } from './Header';
⋮----
type User = {
  name: string;
};
⋮----
<svg width="10" height="10" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg">
````

## File: src/types/index.ts

````typescript
/**
 * Re-export all types from the types subdirectory
 */
⋮----
// Database model types
⋮----
// Zod validation schemas
⋮----
// API related types
⋮----
// Auth related types
export type UserRole = "user" | "restaurant_admin" | "system_admin";
⋮----
export type AuthUser = {
 id: string;
 clerkId: string;
 name: string;
 email: string;
 role: UserRole;
 restaurantIds?: bigint[]; // Only for restaurant_admin
};
⋮----
restaurantIds?: bigint[]; // Only for restaurant_admin
⋮----
// Application state types
export type ToastType = "success" | "error" | "info" | "warning";
⋮----
export type Toast = {
 id: string;
 type: ToastType;
 title: string;
 message: string;
 duration?: number;
};
⋮----
// UI specific types
export type SortDirection = "asc" | "desc";
⋮----
export type SortOption<T extends string = string> = {
 field: T;
 direction: SortDirection;
};
⋮----
export type FilterOption<T extends string = string> = {
 field: T;
 value: string | number | boolean | null;
 operator?: "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "contains";
};
⋮----
// Theme
export type Theme = "light" | "dark" | "system";
⋮----
// QR Code
export type QRCodeSize = "sm" | "md" | "lg";
⋮----
// Feature flags
export type FeatureFlag = {
 name: string;
 enabled: boolean;
 description?: string;
};
⋮----
// Re-export types from other files
⋮----
// Add other type exports as needed
````

## File: src/types/react-qr-scanner.d.ts

````typescript
import { Component } from "react";
⋮----
export interface QrScannerProps {
  onScan: (data: { text: string } | null) => void;
  onError: (err: Error) => void;
  style?: React.CSSProperties;
  className?: string;
  delay?: number;
  facingMode?: string;
  resolution?: number;
  constraints?: MediaTrackConstraints;
  chooseDeviceId?: () => string;
  [key: string]: unknown;
 }
⋮----
export default class QrScanner extends Component<QrScannerProps>
````

## File: src/middleware.ts

````typescript
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";
⋮----
// This example protects all routes including api/trpc routes
// Please edit this to allow other routes to be public as needed.
// See https://clerk.com/docs/references/nextjs/auth-middleware for more information about configuring your middleware
⋮----
// Skip Next.js internals and all static files, unless found in search params
⋮----
// Always run for API routes
````

## File: .cursorignore

````
# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)
````

## File: components.json

````json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
````

## File: GENERATORS.md

````markdown
# Code Generators

This project uses [Plop.js](mdc:https:/plopjs.com) to generate components, features, and pages.

## Using the Generators

Run the generator with:

```bash
bun run generate
# or
npm run generate
```

Then select the type of generator you want to use:

- `component` - Creates a new UI component
- `feature` - Creates a new feature with its main component
- `page` - Creates a new Next.js page

## Component Generator

Creates a new component in `src/components/{type}/`.

Prompts:
- **name**: The name of the component
- **type**: The type of component (ui, kokonutui, magicui, admin, qr-code)

Example output for a Button component of type 'ui':
```
src/components/ui/Button.tsx
```

## Feature Generator

Creates a new feature with its main component in `src/features/{featureName}/`.

Prompts:
- **name**: The name of the feature
- **component**: The name of the main component

Example output for a 'userProfile' feature with 'ProfileCard' component:
```
src/features/userProfile/ProfileCard.tsx
src/features/userProfile/index.ts
```

## Page Generator

Creates a new Next.js page in `src/app/{path}/`.

Prompts:
- **path**: The page path (e.g. "restaurants/new")
- **withLayout**: Whether to create a layout file

Example output for path 'restaurants/new' with layout:
```
src/app/restaurants/new/page.tsx
src/app/restaurants/new/layout.tsx
```
````

## File: tsconfig.json

````json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
````

## File: .storybook/preview.tsx

````typescript
// eslint-disable
// @ts-nocheck
import type {Preview} from '@storybook/react'
⋮----
import React from 'react'
⋮----
// 👇 Defining the decorator in the preview file applies it to all stories
````

## File: src/actions/restaurants.ts

````typescript
import { db } from "@/db/db";
import { restaurants } from "@/db/drizzle/schema";
import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { z } from "zod";
import { createRestaurantSchema, restaurantSchema } from "@/types/schemas";
import type { Restaurant } from "@/types/db";
⋮----
export type RestaurantFormData = z.infer<typeof createRestaurantSchema>;
⋮----
/**
 * Creates a new restaurant
 */
export async function createRestaurantAction(formData: RestaurantFormData)
⋮----
/**
 * Updates an existing restaurant
 */
export async function updateRestaurantAction(
 id: bigint,
 data: Partial<RestaurantFormData>,
)
⋮----
// Validate partial data
⋮----
/**
 * Deletes a restaurant
 */
export async function deleteRestaurantAction(id: bigint)
⋮----
/**
 * Updates the QR code URL for a restaurant
 */
export async function updateRestaurantQRCodeAction(
 id: bigint,
 qrCodeUrl: string,
)
⋮----
// Action result type
type ActionResult = {
 success: boolean;
 message: string;
 error?: Record<string, string[]>;
};
⋮----
// Add this new function to handle CSV bulk import
export async function importRestaurantsFromCSV(
 restaurantsData: Record<string, unknown>[],
): Promise<ActionResult>
⋮----
// Validate the restaurant data with Zod
⋮----
// Validate each restaurant
⋮----
// If validation fails, throw with details
⋮----
// Convert validated data to the format expected by Drizzle
⋮----
// Insert all restaurants into the database
⋮----
// Revalidate the restaurants page to show the new data
````

## File: src/app/(public)/deals/page.tsx

````typescript
import Link from 'next/link'
import {DealsList, DealsListSkeleton} from '@/features/deals'
import {
  getActiveDeals,
  getRestaurants,
} from '@/db/models/restaurants/restaurants'
import {Suspense} from 'react'
````

## File: src/app/admin/deals/[id]/edit/page.tsx

````typescript
import { notFound } from "next/navigation";
import { getDeals } from "@/db/models/restaurants/restaurants";
import { EditDealForm } from "@/components/admin/deals";
⋮----
export default async function EditDealPage({
 params,
}:
⋮----
// Fetch the deal data
⋮----
// If the deal doesn't exist, show 404
````

## File: src/app/admin/deals/[id]/page.tsx

````typescript
import { DealDetail } from "@/components/admin/deals";
⋮----
export default async function DealDetailPage({
 params,
}:
````

## File: src/app/admin/restaurants/new/page.tsx

````typescript
import { RestaurantForm } from "@/components/admin/restaurant-form";
import React from "react";
⋮----
export default function NewRestaurantPage()
````

## File: src/app/api/webhooks/route.ts

````typescript
import { Webhook } from "svix";
import { headers } from "next/headers";
import type { User, WebhookEvent } from "@clerk/nextjs/server";
import { createUser } from "@/db/models/users";
⋮----
export async function POST(req: Request)
⋮----
// Create new Svix instance with secret
⋮----
// Get headers
⋮----
// If there are no headers, error out
⋮----
// Get body
````

## File: src/components/admin/deals/index.ts

````typescript

````

## File: src/components/admin/admin-content.tsx

````typescript
import { useSidebar } from "@/components/admin/SidebarContext";
import { AdminSidebar } from "@/components/admin/Sidebar";
⋮----
export function AdminContent(
⋮----
{/* Sidebar */}
⋮----
{/* Main content area */}
⋮----
{/* Header */}
⋮----
{/* Main content */}
{/* max-w-7xl */}
````

## File: src/components/admin/prize-card.tsx

````typescript
import type { Prize } from "@/types/db";
import {
 Card,
 CardContent,
 CardFooter,
 CardHeader,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
⋮----
interface PrizeCardProps {
 prize: Prize;
}
⋮----
export function PrizeCard(
````

## File: src/components/admin/restaurant-detail-modal.tsx

````typescript
import React from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog'
import {Button} from '@/components/ui/button'
import {PrizeCard} from './prize-card'
import {QRCodeManager} from '@/app/admin/restaurants/qr-code-manager'
import {Badge} from '@/components/ui/badge'
import Image from 'next/image'
import type {Restaurant, Prize, PunchCard} from '@/types/db'
import {PunchCardsList} from './punch-cards-list'
⋮----
// Define a type for the detailed restaurant with associated data
interface DetailedRestaurant extends Restaurant {
  prizes: Prize[]
  punchCards: PunchCard[]
  punchCardCount: number
}
⋮----
interface RestaurantDetailModalProps {
  restaurant: DetailedRestaurant
  isOpen: boolean
  onClose: () => void
}
⋮----
export function RestaurantDetailModal({
  restaurant,
  isOpen,
  onClose,
}: RestaurantDetailModalProps)
⋮----
ID:
⋮----
{/* Restaurant Image */}
⋮----
{/* Restaurant Description */}
⋮----
{/* QR Code */}
⋮----
{/* Punch Cards */}
````

## File: src/components/admin/SidebarContext.tsx

````typescript
import React, {
 createContext,
 useContext,
 useState,
 type ReactNode,
} from "react";
⋮----
interface SidebarContextType {
 collapsed: boolean;
 toggleCollapse: () => void;
}
⋮----
export function SidebarProvider(
⋮----
const toggleCollapse = () =>
⋮----
export function useSidebar()
````

## File: src/components/kokonutui/list-01.tsx

````typescript
import { cn } from "@/lib/utils";
import { MessageSquare, type LucideIcon, Music, Store } from "lucide-react";
⋮----
interface ListItem {
    id: string;
    title: string;
    description?: string;
    icon: LucideIcon;
    iconStyle: string;
    time: string;
    badge?: {
        text: string;
        variant: "pink" | "indigo" | "orange";
    };
    starred?: boolean;
}
⋮----
interface List01Props {
    items?: ListItem[];
    className?: string;
}
⋮----
className=
````

## File: src/components/kokonutui/list-02.tsx

````typescript
import { cn } from "@/lib/utils";
import {
    ArrowUpRight,
    ArrowDownLeft,
    Wallet,
    ShoppingCart,
    CreditCard,
    type LucideIcon,
} from "lucide-react";
⋮----
interface Transaction {
    id: string;
    title: string;
    amount: string;
    type: "incoming" | "outgoing";
    category: string;
    icon: LucideIcon;
    timestamp: string;
    status: "completed" | "pending" | "failed";
}
⋮----
interface List02Props {
    transactions?: Transaction[];
    className?: string;
}
⋮----
className=
````

## File: src/components/leaderboard/restaurant-leaderboard.tsx

````typescript
import { Badge } from "@/components/ui/badge";
import {
 Table,
 TableBody,
 TableCell,
 TableHead,
 TableHeader,
 TableRow,
} from "@/components/ui/table";
import { Trophy } from "lucide-react";
import { motion } from "framer-motion";
import Image from "next/image";
import Link from "next/link";
import type { RestaurantLeaderboardEntry } from "@/types/api";
⋮----
interface RestaurantLeaderboardProps {
 restaurants: RestaurantLeaderboardEntry[];
}
⋮----
// Function to get rank badge color
const getRankBadgeColor = (rank: number) =>
⋮----
className="contents" // Using contents to not disrupt table layout
````

## File: src/components/leaderboard/user-leaderboard.tsx

````typescript
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
 Table,
 TableBody,
 TableCell,
 TableHead,
 TableHeader,
 TableRow,
} from "@/components/ui/table";
import { Trophy } from "lucide-react";
import { motion } from "framer-motion";
import type { UserLeaderboardEntry } from "@/types/api";
⋮----
interface UserLeaderboardProps {
 users: UserLeaderboardEntry[];
}
⋮----
// Function to get initials from name
const getInitials = (name: string) =>
⋮----
// Function to get rank badge color
const getRankBadgeColor = (rank: number) =>
⋮----
className="contents" // Using contents to not disrupt table layout
````

## File: src/components/nav/nav.stories.tsx

````typescript
import type { Meta, StoryObj } from "@storybook/react";
import { Nav } from "./nav";
import { fn, userEvent, within, expect } from "@storybook/test";
import { useState } from "react";
⋮----
/**
 * The Nav component is a mobile-style bottom navigation bar that allows users to navigate
 * between the main sections of the app. It includes icons and labels for each navigation item
 * and provides visual feedback for the currently active tab.
 */
⋮----
layout: "fullscreen", // Use fullscreen layout as this is a navigation component
⋮----
type Story = StoryObj<typeof meta>;
⋮----
/**
 * The default navigation bar with the "home" tab active.
 */
⋮----
/**
 * Navigation bar with the "restaurants" tab active.
 */
⋮----
/**
 * Navigation bar with the "profile" tab active.
 */
⋮----
/**
 * Navigation bar with the "punchCards" tab active.
 */
⋮----
/**
 * Navigation bar with the "leaderBoard" tab active.
 */
⋮----
/**
 * This story demonstrates the interactive behavior of the navigation bar.
 * Click on the different tabs to see the active state update with animation.
 *
 * This is useful for testing the component's behavior and the animation of the active indicator.
 */
⋮----
// Verify home tab is initially active
⋮----
// Click on Restaurants tab
⋮----
// Click on Profile tab
⋮----
// Click on Punch Cards tab
⋮----
// Click on Leader Board tab
⋮----
// Return to Home tab
⋮----
/**
 * This story demonstrates how to use the onTabChange callback to respond to tab changes.
 * A parent component can use this callback to update its own state or trigger navigation.
 */
⋮----
// This is a decorator component that shows what tab was last clicked
const TabChangeDemo = () =>
⋮----
onTabChange=
````

## File: src/components/ui/animated-modal.tsx

````typescript
import {cn} from '@/lib/utils'
import {AnimatePresence, motion} from 'framer-motion'
import type React from 'react'
import {
  type ReactNode,
  createContext,
  useContext,
  useEffect,
  useRef,
  useState,
} from 'react'
⋮----
interface ModalContextType {
  open: boolean
  setOpen: (open: boolean) => void
}
⋮----
export const ModalProvider = (
⋮----
export const useModal = () =>
⋮----
export function Modal(
⋮----
export const ModalTrigger = ({
  children,
  className,
}: {
  children: ReactNode
  className?: string
}) =>
⋮----
className=
⋮----
export const ModalFooter = ({
  children,
  className,
}: {
  children: ReactNode
  className?: string
}) =>
⋮----
const Overlay = (
⋮----
// Hook to detect clicks outside of a component.
// Add it in a separate file, I've added here for simplicity
⋮----
const listener = (event: any) =>
⋮----
// DO NOTHING if the element being clicked is the target element or their children
````

## File: src/components/ui/avatar.tsx

````typescript
import { cn } from "@/lib/utils";
````

## File: src/components/ui/badge.tsx

````typescript
import { cva, type VariantProps } from "class-variance-authority"
⋮----
import { cn } from "@/lib/utils"
⋮----
export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}
⋮----
<div className=
````

## File: src/components/ui/card.tsx

````typescript
import { cn } from "@/lib/utils"
⋮----
className=
⋮----
<div ref=
````

## File: src/components/ui/checkbox.tsx

````typescript
import { CheckIcon } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>)
⋮----
className=
````

## File: src/components/ui/dialog.tsx

````typescript
import { X } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
className=
````

## File: src/components/ui/hero-parallax.tsx

````typescript
import React from 'react'
import {
  motion,
  useScroll,
  useTransform,
  useSpring,
  type MotionValue,
} from 'framer-motion'
import Image from 'next/image'
import Link from 'next/link'
````

## File: src/components/ui/restaurant-punch-card.tsx

````typescript
import {motion} from 'framer-motion'
import {cn} from '@/lib/utils'
import {BarChart, CalendarDays, Ticket, Users} from 'lucide-react'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import {PUNCH_THRESHOLD} from '@/components/ui/restaurant-specific-user-punch-card'
⋮----
interface RestaurantPunchCardProps {
  restaurantName: string
  totalPunchCards: number
  completedPunchCards: number
  activePunchCards: number
  recentActivityDays?: number
  className?: string
}
⋮----
{/* Total Punch Cards */}
⋮----
{/* Active Punch Cards */}
⋮----
{/* Completion Rate */}
⋮----
{/* Recent Activity */}
````

## File: src/components/ui/restaurant-specific-user-punch-card.tsx

````typescript
import {motion, AnimatePresence} from 'framer-motion'
import {cn} from '@/lib/utils'
import {Award, Coffee, Stamp, Utensils} from 'lucide-react'
import Image from 'next/image'
import Link from 'next/link'
import {Badge} from '@/components/ui/badge'
⋮----
// Constant for punch threshold
⋮----
interface PunchCardProps
  extends Omit<React.ComponentProps<typeof motion.div>, 'ref'> {
  restaurantName: string
  restaurantImage?: string
  restaurantId: string | number | bigint
  currentPunches: number
  MAX_PUNCH_THRESHOLD?: number
  completed?: boolean
  lastUpdated?: Date | string
  onAddPunch?: () => void
}
⋮----
const handleAddPunch = (
      e:
        | React.MouseEvent<HTMLButtonElement>
        | React.TouchEvent<HTMLButtonElement>
) =>
⋮----
// Calculate position for the punch animation
⋮----
// Handle both mouse and touch events
⋮----
// Mouse event
⋮----
// Touch event
⋮----
// If no valid coordinates, default to center
⋮----
// Format the lastUpdated date in a readable format
const formatDate = (dateString: string | Date) =>
⋮----
className=
⋮----
{/* Restaurant Image */}
⋮----
{/* Restaurant Info Overlay */}
⋮----
Last updated:
⋮----
{/* Punch Card Content */}
⋮----
{/* Punch Grid - Adaptive grid layout based on screen size */}
⋮----
{/* Action Buttons */}
````

## File: src/components/ui/sheet.tsx

````typescript
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
⋮----
import { cn } from "@/lib/utils"
⋮----
interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}
⋮----
className=
````

## File: src/components/ui/tabs.tsx

````typescript
import { cn } from "@/lib/utils"
````

## File: src/context/location-context.tsx

````typescript
import { useGeolocation } from "@/hooks/use-geolocation";
import { createContext, useMemo } from "react";
⋮----
type LocationContextType = {
 coords: GeolocationCoordinates | null;
 error: string | null;
};
⋮----
export const LocationProvider = ({
 children,
}:
⋮----
// Use useMemo to prevent unnecessary re-renders of context consumers
````

## File: src/context/user-context.tsx

````typescript
// use client
⋮----
import type React from 'react'
import {
  createContext,
  useContext,
  useEffect,
  useState,
  useCallback,
} from 'react'
import {useUser as useClerkUser, useSession} from '@clerk/nextjs'
import {getUserByClerkId} from '@/db'
⋮----
// Define the full user type as stored in our DB
export type AppUser = {
  id: number
  clerkId: string
  name: string
  isStaff: boolean
  isAdmin: boolean
}
⋮----
// Context type with current user, loading state, error and a reload function
export type UserContextType = {
  currentUser: AppUser | null
  isLoading: boolean
  error: string | null
  reloadUser: () => void
}
⋮----
export const UserProvider: React.FC<{children: React.ReactNode}> = ({
  children,
}) =>
⋮----
// Use useCallback to memoize fetchUser
⋮----
// When clerk auth is loaded and we have a clerk ID, fetch the full user data
⋮----
// .then((dbUser: any) => {
//   setCurrentUser({
//     ...dbUser,
//     ...clerkUser,
//   })
// })
⋮----
// Allows manual refresh of the full user data
const reloadUser = () =>
⋮----
// If the user has logged out via the the Clerk UI, set the current user to null
⋮----
export const useUserContext = (): UserContextType =>
````

## File: src/db/models/users/users.ts

````typescript
import { eq } from "drizzle-orm";
import { db } from "../../db";
import { users } from"@/db/drizzle/schema"
import type { User } from "@/types/db";
⋮----
export const getUsers = async () =>
⋮----
export const getUserById = async (id: bigint) =>
⋮----
export const getUserByClerkId = async (clerkId: string) =>
⋮----
export const getUserByClerkIdWithPunchCards = async (clerkId: string) =>
export const createUser = async (data: {
 clerkId: string;
 name: string;
 email: string;
 isStaff?: boolean;
 isAdmin?: boolean;
}) =>
⋮----
export const updateUser = async (
 id: bigint,
 data: Partial<{
  name: string;
  isStaff: boolean;
  isAdmin: boolean;
 }>,
) =>
⋮----
export const deleteUser = async (id: bigint) =>
````

## File: src/features/deals/DealsList.tsx

````typescript
import { useState, useMemo } from "react";
import Image from "next/image";
import Link from "next/link";
import { Tag, Clock, ExternalLink } from "lucide-react";
import { motion } from "framer-motion";
import { cn } from "@/lib/utils";
import type { Deal } from "@/types/db";
⋮----
// This type represents the deal structure as it comes from the database
interface DatabaseDeal {
 id: bigint;
 restaurantId: bigint;
 title?: string;
 content: string;
 active: boolean | null;
 createdAt: string | null;
 updatedAt: string | null;
 name?: string;
 imageUrl?: string;
 restaurant?: {
  id: bigint;
  name: string;
  imageUrl?: string;
 };
}
⋮----
interface DealsListProps {
 deals: DatabaseDeal[];
 className?: string;
}
⋮----
// Sort deals by active status (active first) and then by creation date (newest first)
⋮----
// First sort by active status (active deals first)
⋮----
// Then sort by creation date (newest first)
⋮----
const toggleExpand = (id: string) =>
⋮----
{/* Show restaurant info for each deal */}
⋮----
src={"/RWP.jpg"} // deal?.restaurant?.imageUrl ||
⋮----
// Used for displaying skeleton loading state
⋮----
// Generate stable keys for skeleton items
````

## File: src/features/prizes/prize-card/PrizeCard.tsx

````typescript
import Image from 'next/image';
⋮----
export function PrizeCard(
````

## File: src/features/users/passport/index.tsx

````typescript

````

## File: src/features/users/passport/passport.tsx

````typescript
import {Martini} from '@/components/icons/Martini'
import {ProgressIndicator} from '@/components/progress-indicator/progress-indicator'
import type {restaurants} from '@/db'
import {MAX_PUNCH_THRESHOLD} from '@/lib/constants'
import {cn} from '@/lib/utils'
import type {PunchCardWithRestaurant} from '@/types'
⋮----
import {AnimatePresence, motion} from 'framer-motion'
import {Coffee, Pizza, Salad, Stamp, Wine} from 'lucide-react'
import type React from 'react'
import {useState} from 'react'
⋮----
interface PassportProps {
  children?: React.ReactNode
  punches: PunchCardWithRestaurant[]
}
⋮----
const updateActivePunchCardData = (punchData: PunchCardWithRestaurant) =>
⋮----
{/* Card Header */}
⋮----
{/* Restaurant List */}
⋮----
{/* <AnimatePresence> */}
⋮----
// initial={false}
⋮----
// initial={false}
⋮----
{/* </AnimatePresence> */}
````

## File: src/features/users/index.ts

````typescript

````

## File: src/features/users/lottery-status.tsx

````typescript
import {
  CheckCircle,
  Circle,
  Flag,
  Clock,
  MoreHorizontal,
  Hexagon,
  CircleCheck,
  Stamp,
  LineChart,
} from 'lucide-react'
import React, {useEffect} from 'react'
import {motion, AnimatePresence} from 'framer-motion'
import type {PunchCardWithRestaurant} from '@/types/api'
import type {PunchCard} from '@/types'
````

## File: src/hooks/use-mobile.tsx

````typescript
export function useIsMobile()
⋮----
const onChange = () =>
````

## File: src/types/schemas.ts

````typescript
import { z } from "zod";
import type {
 User,
 Restaurant,
 PunchCard,
 Prize,
 PrizeRedemption,
 PointTransfer,
 Achievement,
} from "./db";
⋮----
/**
 * User schemas
 */
⋮----
export type CreateUserInput = z.infer<typeof createUserSchema>;
⋮----
export type CreateRestaurantInput = z.infer<typeof createRestaurantSchema>;
⋮----
/**
 * Punch card schemas
 */
⋮----
export type CreatePunchCardInput = z.infer<typeof createPunchCardSchema>;
⋮----
/**
 * Prize schemas
 */
⋮----
export type CreatePrizeInput = z.infer<typeof createPrizeSchema>;
⋮----
/**
 * Prize redemption schemas
 */
⋮----
export type CreatePrizeRedemptionInput = z.infer<
 typeof createPrizeRedemptionSchema
>;
⋮----
/**
 * Point transfer schemas
 */
⋮----
export type CreatePointTransferInput = z.infer<
 typeof createPointTransferSchema
>;
⋮----
/**
 * Achievement schemas
 */
⋮----
export type CreateAchievementInput = z.infer<typeof createAchievementSchema>;
⋮----
/**
 * Restaurant schemas
 */
````

## File: drizzle.config.ts

````typescript
// drizzle.config.ts
import { defineConfig } from "drizzle-kit";
import dotenv from "dotenv";
⋮----
// Load environment variables from .env file
⋮----
schema: "./src/db/schema.ts", // Where the generated schema will be written
⋮----
// Simplify introspection to avoid constraint issues
⋮----
casing: "camel", // Keep the original casing from the database
````

## File: plopfile.js

````javascript
module.exports = (plop) => {
plop.setGenerator("component", componentGenerator);
plop.setGenerator("feature", featureGenerator);
````

## File: postcss.config.mjs

````
/** @type {import('postcss-load-config').Config} */
````

## File: .storybook/main.ts

````typescript
import type { StorybookConfig } from "@storybook/experimental-nextjs-vite";
````

## File: src/actions/scan-actions.ts

````typescript
import {
 createPunchCard,
 getUserPunchCardForRestaurant,
 incrementPunchCard,
} from "@/db/models/punch-cards/punch-cards";
import { getRestaurantById } from "@/db/models/restaurants/restaurants";
import { getUserByClerkId } from "@/db/models/users/users";
import { convertBigInts } from "@/lib/utils";
⋮----
export async function processQrScan(formData: {
 qrData: string;
 userId: string | number | bigint;
})
⋮----
// Attempt to parse the QR data if it's a JSON string
⋮----
// Try to parse JSON if the string looks like JSON
⋮----
// If parsed successfully, check for common QR result properties
⋮----
// If JSON parsing fails, use the original string
⋮----
// Parse the QR URL to extract restaurant ID
// const qrCodeUrl = new URL(qrDataString);
⋮----
// console.log("🚀 ~ qrCodeUrl:", qrCodeUrl);
⋮----
// const pathname = qrCodeUrl.pathname;
// // Extract only numeric part from the path to ensure valid BigInt conversion
// const pathParts = pathname.split("/").filter(Boolean);
// const restaurantId = pathParts.pop();
// const numericRestaurantId = restaurantId?.replace(/\D/g, "");
⋮----
// console.log("🚀 ~ Extracted restaurant ID:", numericRestaurantId);
⋮----
// Check if userId is a string that doesn't represent a number (likely a Clerk ID)
⋮----
// Check if the userId string is a numeric value or a Clerk ID
⋮----
// If it's not a numeric string, assume it's a Clerk ID and get the real user ID
⋮----
// If it's a numeric string, convert it to BigInt
⋮----
// Convert restaurant ID to BigInt
⋮----
// Make absolutely sure we have a valid numeric string
⋮----
// Get restaurant details for response
⋮----
// Check if punch card already exists
⋮----
// If punch card exists, increment the punches
// const updatedPunchCard = await incrementPunchCard(
//  punchCardExists.id,
//  1, // Increment by 1
// );
⋮----
data: convertBigInts( punchCardExists), // updatedPunchCard?.[0] ||
⋮----
// Create new punch card if it doesn't exist
⋮----
completed: true, // Set to false initially
⋮----
// Check if this is a BigInt conversion error
⋮----
// Check if this is a user not found error
````

## File: src/app/(public)/restaurants/[id]/page.tsx

````typescript
import { Restaurant } from "@/features/restaurants/Restaurant";
import { UserFacingRestaurantDetail } from "@/features/restaurants/UserFacingRestaurantDetail";
⋮----
export default async function RestaurantPage({
 params,
}:
````

## File: src/app/api/restaurants/[id]/scan/route.ts

````typescript
import {
 createPunchCard,
 getUserPunchCardForRestaurant,
 incrementPunchCard,
} from "@/db/models/punch-cards/punch-cards";
import { getRestaurantById } from "@/db/models/restaurants/restaurants";
import { PUNCH_THRESHOLD } from "@/components/ui/restaurant-specific-user-punch-card";
import type { PunchCard } from "@/types/db";
⋮----
// NEW: Helper to safely serialize data with BigInt conversion
const safeJson = (data: unknown)
⋮----
export async function POST(request: Request)
⋮----
// Extract restaurant ID from URL
⋮----
// Parse request body
⋮----
// Get restaurant details
⋮----
// Check if punch card already exists
⋮----
// Increment existing punch card
⋮----
// incrementPunchCard can return null if the card doesn't exist, but we already checked
⋮----
// Extract the card from the array
// @ts-ignore
⋮----
// Create new punch card
⋮----
// Check if the punch card is now completed
⋮----
// If completed, update the punch card
⋮----
// Here you would add logic to mark the card as completed
// and create a raffle entry if needed
````

## File: src/components/admin/deals/edit-deal-form.tsx

````typescript
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import type { Deal } from "@/types/db";
import {
 getRestaurants,
 updateRestaurantDeal,
} from "@/db/models/restaurants/restaurants";
import { toast } from "sonner";
⋮----
// Define a simplified restaurant type for the select dropdown
type SimpleRestaurant = {
 id: bigint;
 name: string;
};
⋮----
// Define the props for the component
interface EditDealFormProps {
 id: string;
 deal: Deal & { restaurant?: { id: bigint; name: string } };
}
⋮----
// Fetch restaurants for the dropdown
⋮----
const fetchRestaurants = async () =>
⋮----
// Simplify the restaurant data to only what we need for the dropdown
⋮----
const handleChange = (
  e: React.ChangeEvent<
   HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
  >,
) =>
⋮----
const handleSubmit = async (e: React.FormEvent) =>
⋮----
// Validate form
⋮----
// Update the deal in the database
⋮----
// Redirect to deal detail page on success
⋮----
{/* Deal Title */}
⋮----
{/* Deal Content / Description */}
⋮----
{/* Restaurant Selection */}
⋮----
<option key=
⋮----
{/* Image URL */}
⋮----
{/* Active Status */}
⋮----
{/* Form Actions */}
````

## File: src/components/ui/in-view.tsx

````typescript
import {type ReactNode, useRef} from 'react'
⋮----
import {motion} from 'framer-motion'
import {useInView, type Variant} from 'framer-motion'
import type {Transition} from 'framer-motion'
import type {UseInViewOptions} from 'framer-motion'
⋮----
export type InViewProps = {
  children: ReactNode
  variants?: {
    hidden: Variant
    visible: Variant
  }
  transition?: Transition
  viewOptions?: UseInViewOptions
  as?: React.ElementType
}
⋮----
export function InView({
  children,
  variants = defaultVariants,
  transition,
  viewOptions,
  as = 'div',
}: InViewProps)
````

## File: src/db/relations.ts

````typescript
import { relations } from "drizzle-orm/relations";
import {
 users,
 achievements,
 pointBalances,
 pointTransfers,
 prizes,
 prizeRedemptions,
 punchCards,
 restaurants,
 raffleEntries,
 restaurantDeals,
} from "./schema";
````

## File: src/features/restaurants/RestaurantSearchBar.tsx

````typescript
import type { ChangeEvent } from "react";
import { Search, ArrowUpDown, Tag } from "lucide-react";
import { Input } from "@/components/ui/input";
import {
 Select,
 SelectContent,
 SelectItem,
 SelectTrigger,
 SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import type { SortOption } from "@/hooks/useRestaurantSearch";
⋮----
export interface RestaurantSearchBarProps {
 searchTerm: string;
 onSearchChange: (term: string) => void;
 sortOption: SortOption;
 onSortChange: (option: SortOption) => void;
 hasDeals: boolean;
 onDealsChange: (hasDeals: boolean) => void;
 className?: string;
}
⋮----
export function RestaurantSearchBar({
 searchTerm,
 onSearchChange,
 sortOption,
 onSortChange,
 hasDeals,
 onDealsChange,
 className = "",
}: RestaurantSearchBarProps)
⋮----
const handleSearchChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleSortChange = (value: string) =>
⋮----
const handleDealsChange = (checked: boolean) =>
````

## File: src/hooks/index.ts

````typescript

````

## File: src/hooks/use-geolocation.tsx

````typescript
import { useState, useEffect } from "react";
⋮----
export const useGeolocation = () =>
⋮----
// Lazy initialize state to avoid unnecessary renders on mount
⋮----
// Skip geolocation on server
⋮----
// Don't run geolocation immediately - wait until needed or component is visible
const handleGetLocation = () =>
⋮----
// Set loading state and clear previous errors
⋮----
// Handle timeouts better with options
⋮----
enableHighAccuracy: false, // Use lower accuracy for better performance
timeout: 5000, // 5 second timeout
maximumAge: 300000 // Cache for 5 minutes
⋮----
// Wait for user interaction or visibility before triggering geolocation
// This improves page load performance
````

## File: src/lib/utils.ts

````typescript
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
⋮----
export function cn(...inputs: ClassValue[])
⋮----
export function toBigInt(value: string | number)
⋮----
export function toNumber(value: string | number)
⋮----
export function convertBigInts<T>(
 obj: T,
 dataType: "number" | "string" = "number",
): T
⋮----
// Handle arrays
⋮----
// Handle objects
⋮----
// Return primitive values as is
⋮----
export function convertBigIntToString<T>(data: T): T
````

## File: src/types/api.ts

````typescript
import type {
 User,
 Restaurant,
 PunchCard,
 Prize,
 PrizeRedemption,
 PointBalance,
 PointTransfer,
 Achievement,
} from "./db";
⋮----
/**
 * Generic API response
 */
export type ApiResponse<T = unknown> = {
 success: boolean;
 data?: T;
 error?: string;
 message?: string;
};
⋮----
/**
 * Pagination metadata
 */
export type PaginationMeta = {
 page: number;
 pageSize: number;
 total: number;
 totalPages: number;
 hasMore: boolean;
};
⋮----
/**
 * Paginated API response
 */
export type PaginatedApiResponse<T = unknown> = ApiResponse<{
 items: T[];
 meta: PaginationMeta;
}>;
⋮----
/**
 * Pagination query parameters
 */
export type PaginationParams = {
 page?: number;
 pageSize?: number;
};
⋮----
/**
 * User-related API types
 */
export type UserWithPointBalance = User & {
 pointBalance: PointBalance;
};
⋮----
export type UserProfileResponse = ApiResponse<{
 user: UserWithPointBalance;
 punchCards: PunchCard[];
 achievements: Achievement[];
}>;
⋮----
/**
 * Restaurant-related API types
 */
export type RestaurantWithPrizes = Restaurant & {
 prizes: Prize[];
};
⋮----
export type RestaurantDetailResponse = ApiResponse<RestaurantWithPrizes>;
⋮----
/**
 * Point transfer-related API types
 */
export type PointTransferWithUsers = PointTransfer & {
 fromUser: {
  id: bigint;
  name: string;
 };
 toUser: {
  id: bigint;
  name: string;
 };
};
⋮----
/**
 * Punch card-related API types
 */
export type PunchCardWithRestaurant = PunchCard & {
 restaurant: Restaurant;
};
⋮----
/**
 * Prize redemption-related API types
 */
export type PrizeRedemptionWithDetails = PrizeRedemption & {
 prize: Prize;
 restaurant: {
  id: bigint;
  name: string;
  imageUrl: string;
 };
};
⋮----
/**
 * QR code related types
 */
export type QrCodePayload =
 | {
   type: "punch_card";
   userId: string;
   restaurantId: string;
   }
 | {
   type: "prize_redemption";
   redemptionId: string;
   };
⋮----
/**
 * Analytics related types
 */
export type RestaurantAnalytics = {
 totalPunchCards: number;
 completedPunchCards: number;
 activeUsers: number;
 prizeRedemptions: number;
 dailyStats: Array<{
  date: string;
  punches: number;
  completions: number;
  redemptions: number;
 }>;
};
⋮----
/**
 * Leaderboard entry
 */
export type LeaderboardEntry = {
 userId: bigint;
 userName: string;
 points: number;
 rank: number;
};
⋮----
/**
 * System admin dashboard stats
 */
export type AdminDashboardStats = {
 totalUsers: number;
 totalRestaurants: number;
 MAX_PUNCH_THRESHOLD: number;
 totalPrizeRedemptions: number;
 activeUsersLast30Days: number;
};
⋮----
/**
 * User Leaderboard Entry
 */
export type UserLeaderboardEntry = {
 userId: bigint;
 userName: string;
 punchCardCount: number;
 rank: number;
};
⋮----
/**
 * Restaurant Leaderboard Entry
 */
export type RestaurantLeaderboardEntry = {
 restaurantId: bigint;
 restaurantName: string;
 imageUrl: string;
 punchCardCount: number;
 rank: number;
};
````

## File: .gitignore

````
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules/
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

*storybook.log

# Output
restaurant-data.json

# Environment
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE and editors
.idea/
.vscode/
*.swp
*.swo

# OS
Thumbs.db
````

## File: eslint.config.mjs

````
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
⋮----
const compat = new FlatCompat({
⋮----
// Determine if we're in production build mode
⋮----
...compat.extends("next/core-web-vitals", "next/typescript"),
⋮----
// Disable rules that are too strict for production builds
⋮----
// Make TypeScript errors warnings instead of errors in production
⋮----
// Downgrade some rule severities for both development and production
⋮----
// Configure linting to not break builds in production
⋮----
// Don't error on certain Next.js warnings
⋮----
// Note: ESLint doesn't support a global "error to warning" setting
// Individual rule severities are already configured above based on isProduction
````

## File: drizzle/meta/_journal.json

````json
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1740512556401,
      "tag": "0000_damp_black_panther",
      "breakpoints": true
    },
    {
      "idx": 1,
      "version": "7",
      "when": 1740526982366,
      "tag": "0001_exotic_vengeance",
      "breakpoints": true
    },
    {
      "idx": 2,
      "version": "7",
      "when": 1740982802973,
      "tag": "0002_quick_alex_power",
      "breakpoints": true
    },
    {
      "idx": 3,
      "version": "7",
      "when": 1741910441814,
      "tag": "0003_sudden_scream",
      "breakpoints": true
    },
    {
      "idx": 4,
      "version": "7",
      "when": 1741911406260,
      "tag": "0004_wet_katie_power",
      "breakpoints": true
    }
  ]
}
````

## File: src/app/admin/restaurants/actions.ts

````typescript
import { db } from "@/db/db";
import { restaurants } from "@/db/drizzle/schema";
import { eq } from "drizzle-orm";
import { createRestaurantSchema } from "@/types/schemas";
import { z } from "zod";
import { createRestaurant } from "@/db/models/restaurants";
import { revalidatePath } from "next/cache";
⋮----
// Function to convert QR code SVG to a data URL
export async function saveQRCodeUrl(
 restaurantId: string,
 qrCodeUrl: string,
)
⋮----
// Function to save multiple QR codes at once for bulk generation
export async function saveBulkQRCodeUrls(
 restaurantQRCodes: { restaurantId: string; qrCodeUrl: string }[],
): Promise<
⋮----
// Process each QR code in sequence
⋮----
// Revalidate the restaurants page to show updates
⋮----
// Consider the operation successful if at least one QR code was saved
⋮----
// Function to create a new restaurant
export async function createRestaurantAction(
 formData: z.infer<typeof createRestaurantSchema>,
): Promise<
⋮----
// Validate the input data
⋮----
// Create the restaurant
⋮----
// Revalidate the restaurants page
````

## File: src/app/admin/users/page.tsx

````typescript
import { getUsers } from "@/db/models/users/users";
import Link from "next/link";
⋮----
{/* {user.role} */}
````

## File: src/app/admin/page.tsx

````typescript
import { auth } from "@clerk/nextjs/server";
import { getUserByClerkId } from "@/db";
import { AdminDashboardContent } from "@/components/admin/admin-dashboard-content";
⋮----
// Server Component for data fetching
export default async function AdminDashboardPage()
⋮----
// Pass the user data to the client component
````

## File: src/components/admin/deals/deals-table.tsx

````typescript
import {useState, useEffect} from 'react'
import Link from 'next/link'
import Image from 'next/image'
import {
  Edit,
  Trash2,
  Eye,
  MoreVertical,
  Download,
  FileSpreadsheet,
  Upload,
} from 'lucide-react'
import type {Deal} from '@/types/db'
import {deleteRestaurantDeal} from '@/db/models/restaurants/restaurants'
import {useRouter} from 'next/navigation'
import {exportToCSV} from '@/lib/csv'
import {CSVUpload} from '@/components/admin/csv-upload'
import {importDealsFromCSV} from '@/actions/deals'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {Button} from '@/components/ui/button'
import {cn} from '@/lib/utils'
import {toast} from 'sonner'
⋮----
// Define the type for the deals with restaurant name
type DealWithRestaurant = Deal & {
  restaurant?: {
    name: string
    id?: bigint
  }
}
⋮----
// Check viewport size on mount and window resize
⋮----
const checkViewport = () =>
⋮----
// Initial check
⋮----
// Set up event listener for resize
⋮----
// Clean up
⋮----
// Function to handle deal deletion
const handleDelete = async (id: bigint) =>
⋮----
const confirmDelete = async () =>
⋮----
router.refresh() // Refresh the page to update the deals list
⋮----
const cancelDelete = () =>
⋮----
// Function to handle CSV export
const handleExportCSV = async () =>
⋮----
// Create a clean export data structure with only the fields we want
⋮----
// Export to CSV
⋮----
// Add handler for CSV import
const handleImportCSV = async (data: Record<string, unknown>[]) =>
⋮----
// Force refresh to get updated data
⋮----
// Mobile card view for deals
⋮----
key=
⋮----
Created:
⋮----
{/* Export CSV Button */}
⋮----
{/* Mobile card view */}
⋮----
{/* Desktop table view */}
⋮----
<tr key=
⋮----
{/* Pagination - simplified for mobile friendliness */}
⋮----
{/* Delete confirmation dialog */}
````

## File: src/components/admin/deals/new-deal-form.tsx

````typescript
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useFormState, useFormStatus } from "react-dom";
import type { Restaurant } from "@/types/db";
import { toast } from "sonner";
⋮----
// Server actions (placed outside the component)
import { getRestaurants } from "@/db/models/restaurants/restaurants";
import { createDeal } from "@/components/admin/deals/actions";
⋮----
// Define a simplified restaurant type for the select dropdown
type SimpleRestaurant = {
 id: bigint;
 name: string;
};
⋮----
// This action gets all restaurants (automatically called in the component)
async function fetchRestaurants()
⋮----
// Simplify the restaurant data to only what we need for the dropdown
⋮----
// Define the form action type
type FormState = {
 error: string | null;
 success: boolean;
};
⋮----
// Button component with loading state
function SubmitButton()
⋮----
// Initialize form state using useFormState hook with the createDeal server action
⋮----
// Fetch restaurants on component mount
⋮----
// Redirect on successful submission
⋮----
{/* Deal Title */}
⋮----
{/* Deal Content / Description */}
⋮----
{/* Restaurant Selection */}
⋮----
<option key=
⋮----
{/* Active Status */}
⋮----
{/* Form Actions */}
````

## File: src/components/kokonutui/bento-grid.tsx

````typescript
import { cn } from "@/lib/utils";
import {
 CheckCircle,
 Clock,
 Star,
 TrendingUp,
 Video,
 Globe,
} from "lucide-react";
import type { ReactNode } from "react";
⋮----
interface BentoItem {
 title: string;
 description: string | ReactNode;
 icon: ReactNode;
 status?: string;
 tags?: string[];
 meta?: string;
 cta?: string;
 colSpan?: number;
 hasPersistentHover?: boolean;
 id?: string;
 renderCustomContent?: boolean;
}
⋮----
interface BentoGridProps {
 items: BentoItem[];
}
⋮----
className=
````

## File: src/components/kokonutui/card-10.tsx

````typescript
import { Clock, X, Calendar } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import Image from "next/image";
````

## File: src/components/magicui/dot-pattern.tsx

````typescript
import {cn} from '@/lib/utils'
import {motion} from 'framer-motion'
import type React from 'react'
import {useEffect, useId, useRef, useState} from 'react'
⋮----
/**
 *  DotPattern Component Props
 *
 * @param {number} [width=16] - The horizontal spacing between dots
 * @param {number} [height=16] - The vertical spacing between dots
 * @param {number} [x=0] - The x-offset of the entire pattern
 * @param {number} [y=0] - The y-offset of the entire pattern
 * @param {number} [cx=1] - The x-offset of individual dots
 * @param {number} [cy=1] - The y-offset of individual dots
 * @param {number} [cr=1] - The radius of each dot
 * @param {string} [className] - Additional CSS classes to apply to the SVG container
 * @param {boolean} [glow=false] - Whether dots should have a glowing animation effect
 */
interface DotPatternProps extends React.SVGProps<SVGSVGElement> {
  width?: number
  height?: number
  x?: number
  y?: number
  cx?: number
  cy?: number
  cr?: number
  className?: string
  glow?: boolean
  [key: string]: unknown
}
⋮----
/**
 * DotPattern Component
 *
 * A React component that creates an animated or static dot pattern background using SVG.
 * The pattern automatically adjusts to fill its container and can optionally display glowing dots.
 *
 * @component
 *
 * @see DotPatternProps for the props interface.
 *
 * @example
 * // Basic usage
 * <DotPattern />
 *
 * // With glowing effect and custom spacing
 * <DotPattern
 *   width={20}
 *   height={20}
 *   glow={true}
 *   className="opacity-50"
 * />
 *
 * @notes
 * - The component is client-side only ("use client")
 * - Automatically responds to container size changes
 * - When glow is enabled, dots will animate with random delays and durations
 * - Uses Motion for animations
 * - Dots color can be controlled via the text color utility classes
 */
⋮----
const updateDimensions = () =>
⋮----
className=
````

## File: src/components/ui/input.tsx

````typescript
import { cn } from "@/lib/utils";
⋮----
export interface InputProps
 extends React.InputHTMLAttributes<HTMLInputElement> {
 hasError?: boolean;
}
⋮----
// Track if input was touched on mobile to determine when to show virtual keyboard
⋮----
// Combine refs (forwarded ref and internal ref)
⋮----
// Update our internal ref
⋮----
// Forward the ref if provided
⋮----
// Handle focus issues on iOS Safari
⋮----
const handleTouchStart = (e: TouchEvent) =>
⋮----
// Only set touched if it's this input element being touched
⋮----
// Use passive listener for better performance
⋮----
className=
⋮----
// Prevent delayed responses on some mobile browsers
e.stopPropagation();
⋮----
// Call the original onTouchStart if provided
props.onTouchStart?.(e);
⋮----
// Fix the 300ms tap delay on mobile browsers
⋮----
// Manually focus the input (helps on iOS Safari)
⋮----
// Call the original onTouchEnd if provided
````

## File: src/components/ui/punchcard.tsx

````typescript
import {motion, AnimatePresence} from 'framer-motion'
import {cn} from '@/lib/utils'
import {Award, Coffee, Stamp, Utensils} from 'lucide-react'
import Image from 'next/image'
import Link from 'next/link'
import {Badge} from '@/components/ui/badge'
import {ProgressIndicator} from '@/components/progress-indicator/progress-indicator'
⋮----
// Constant for punch threshold
⋮----
// Type for a single restaurant punch record
export interface RestaurantPunch {
  restaurantId: string | number | bigint
  restaurantName: string
  restaurantImage?: string
  currentPunches: number
  MAX_PUNCH_THRESHOLD?: number
  completed?: boolean
  lastUpdated?: Date | string
}
⋮----
interface PunchCardProps
  extends Omit<React.ComponentProps<typeof motion.div>, 'ref'> {
  restaurants: RestaurantPunch[]
}
⋮----
className=
⋮----
{/* Card Header */}
⋮----
{/* Restaurant List */}
⋮----
// Sub-component for individual restaurant punch items
````

## File: src/components/ui/sidebar.tsx

````typescript
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";
⋮----
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import {
 Tooltip,
 TooltipContent,
 TooltipProvider,
 TooltipTrigger,
} from "@/components/ui/tooltip";
⋮----
type SidebarContext = {
 state: "expanded" | "collapsed";
 open: boolean;
 setOpen: (open: boolean) => void;
 openMobile: boolean;
 setOpenMobile: (open: boolean) => void;
 isMobile: boolean;
 toggleSidebar: () => void;
};
⋮----
function useSidebar()
⋮----
// This is the internal state of the sidebar.
// We use openProp and setOpenProp for control from outside the component.
⋮----
// This sets the cookie to keep the sidebar state.
⋮----
// Helper to toggle the sidebar.
⋮----
// Adds a keyboard shortcut to toggle the sidebar.
⋮----
const handleKeyDown = (event: KeyboardEvent) =>
⋮----
// We add a state so that we can do data-state="expanded" or "collapsed".
// This makes it easier to style the sidebar with Tailwind classes.
⋮----
{/* This is what handles the sidebar gap on desktop */}
⋮----
// Adjust the padding for floating and inset variants.
⋮----
className=
⋮----
onClick?.(event);
toggleSidebar();
⋮----
// Increases the hit area of the button on mobile.
⋮----
// Increases the hit area of the button on mobile.
⋮----
// Random width between 50 to 90%.
````

## File: src/components/ui/table.tsx

````typescript
import { cn } from "@/lib/utils";
⋮----
className=
⋮----
<thead ref=
````

## File: src/db/models/punch-cards/punch-cards.ts

````typescript
import { and, eq } from "drizzle-orm";
import { db } from "../../db";
import { punchCards, restaurants } from"@/db/drizzle/schema"
⋮----
export const getPunchCards = async () =>
⋮----
export const getPunchCardById = async (id: bigint) =>
⋮----
export const getPunchCardsByUserId = async (userId: bigint) =>
⋮----
export const getUserPunchCardForRestaurant = async (
 userId: bigint,
 restaurantId: bigint,
) =>
⋮----
export const getPunchCardsByRestaurantId = async (restaurantId: bigint) =>
⋮----
export const getUserRestaurantPunchCard = async (
 userId: bigint,
 restaurantId: bigint,
) =>
⋮----
export const createPunchCard = async (data: {
 userId: bigint;
 restaurantId: bigint;
 punches?: number;
 completed?: boolean;
}) =>
⋮----
export const updatePunchCard = async (
 id: bigint,
 data: Partial<{
  punches: number;
  completed: boolean;
 }>,
) =>
⋮----
export const incrementPunchCard = async (id: bigint, increment = 1) =>
⋮----
const currentPunches = card.punches ?? 0; // Default to 0 if punches is null
⋮----
completed: card.completed || false, // Keep existing completed state
⋮----
export const deletePunchCard = async (id: bigint) =>
````

## File: src/db/db.ts

````typescript
import { drizzle } from "drizzle-orm/postgres-js";
⋮----
// import postgres from "postgres";
⋮----
// Disable prefetch as it is not supported for "Transaction" pool mode
// export const client = postgres(connectionString, { prepare: false });
// export const db = drizzle({ client });
````

## File: src/hooks/use-punch-card-subscription.ts

````typescript
import { useState, useEffect } from "react";
// import { supabase } from "@/db/supabase";
import type { PunchCard } from "@/types/db";
import { getPunchCardsByUserId } from "@/db/models/punch-cards";
import { supabase } from "@/db/supabase";
⋮----
export type PunchCardWithRestaurant = {
 id: bigint;
 userId: bigint;
 restaurantId: bigint;
 punches: number;
 completed: boolean;
 updatedAt: string | null;
 restaurant: {
  id: bigint;
  name: string;
  description: string;
  imageUrl: string;
  address: string;
  qrCodeUrl: string | null;
 };
};
⋮----
/**
 * A hook for subscribing to real-time punch card updates
 * @param userId The user ID to subscribe to punch cards for
 * @returns The updated punch cards array
 */
export function usePunchCardSubscription(userId: bigint)
⋮----
// Fetch initial punch cards
⋮----
const fetchPunchCards = async () =>
⋮----
// Call your existing API to get punch cards
⋮----
// Set up real-time subscription
⋮----
// Convert bigint to string for the subscription
⋮----
// Subscribe to punch card changes for this user
⋮----
event: "*", // Listen to all events (insert, update, delete)
⋮----
// Refresh the entire punch cards list to ensure we have the latest data
⋮----
// Clean up subscription on unmount
````

## File: CLAUDE.md

````markdown
# Restaurant Passport App - Developer Guide

## Commands

- `bun run dev` - Start development server
- `bun run build` - Build for production
- `bun run lint` - Run ESLint
- `bun run storybook` - Start Storybook (UI component explorer)
- `bun run new` - Generate new components using Plop
- `bun run drizzle:generate` - Generate database migrations
- `bun run drizzle:migrate` - Run database migrations
- `bun run scrape` - Run restaurant data scraper
- `bun run test` - Run tests with Vitest (to run single test: `bun run test path/to/test.spec.ts`)

## Code Style Guidelines

- **TypeScript**: Use strict mode, explicit return types on functions
- **Imports**: Group imports (React, third-party, internal) with blank line separators
- **Formatting**: 2-space indentation, avoid console.log in production code
- **Components**: Use functional components with React.forwardRef when needed
- **Naming**: PascalCase for components, camelCase for functions, kebab-case for files
- **Error Handling**: Use try/catch with specific error types, avoid generic Error types
- **State Management**: Use React hooks (useState, useContext) for state
- **Database**: Use Drizzle ORM for all database operations
- **API Routes**: Create Next.js API routes with proper status codes and error handling
- **Mobile**: Ensure responsive design with mobile-first approach
- **Testing**: Write tests with Vitest, follow component testing patterns
- **UI Components**: Use Radix UI primitives with Tailwind for styling
- **Performance**: Optimize component rendering, minimize rerenders
````

## File: README.md

````markdown
# Restaurant Data Scraper

This project scrapes restaurant information from a list of URLs. It extracts:

- Restaurant name
- Address information (particularly in Maple Grove, Minnesota)
- Restaurant image (logo or photo)

## Prerequisites

- Node.js 16 or higher
- npm or yarn package manager

## Installation

1. Clone this repository or download the code
2. Install dependencies:

```bash
npm install
# or
yarn install
```

## How to Use

1. Make sure your `scripts/restaurants.json` file contains an array of restaurant URLs
2. Run the scraper using either:

```bash
# Using npm script
npm start

# Or using the shell script (recommended)
npm run scrape
# or directly
bash scripts/run-scraper.sh
```

3. The scraper will process the URLs in batches and save the results to `restaurant-data.json` in the project root

## Output Format

The output file `restaurant-data.json` contains:

- `scrapedAt`: Timestamp of when the scraping was performed
- `totalScraped`: Total number of URLs processed
- `validResults`: Number of URLs that yielded usable data
- `restaurants`: Array of restaurant data objects with:
  - `name`: The name of the restaurant
  - `address`: The address information found
  - `imageUrl`: URL of a restaurant image (logo or photo)
  - `sourceUrl`: The original URL that was scraped

## Project Structure

```
.
├── scripts/
│   ├── restaurants.json     # List of restaurant URLs to scrape
│   ├── scrape-restaurants.js # Main scraper script
│   └── run-scraper.sh       # Helper shell script
├── restaurant-data.json     # Output file (generated after running)
├── package.json
└── README.md
```

## Limitations

- Some websites may block web scraping or have unusual structures that the scraper can't handle
- The address extraction prioritizes finding information about Maple Grove, MN
- Image extraction attempts to find meaningful restaurant images, but may sometimes fail

## Customization

You can modify the selectors in the `scrapeRestaurantInfo` function to better target specific websites if needed.

## License

MIT

## Project Directory Structure

```
.
├── src/
│   ├── app/
│   │   ├── (public)/
│   │   │   ├── restaurants/
│   │   │   │   ├── [id]/
│   │   │   │   │   └── page.tsx
│   │   │   │   └── page.tsx
│   │   ├── admin/
│   │   │   └── deals/
│   │   │       └── [id]/
│   │   │           └── edit/
│   │   │               └── page.tsx
│   │   └── layout.tsx
│   ├── components/
│   │   ├── admin/
│   │   │   ├── deals/
│   │   │   │   └── edit-deal-form.tsx
│   │   │   └── restaurants-table.tsx
│   │   └── auth/
│   ├── db/
│   │   ├── models/
│   │   │   └── restaurants/
│   │   │       ├── restaurants.ts
│   │   │       ├── schema.ts
│   │   │       └── types.ts
│   │   ├── migrations/
│   │   └── drizzle.ts
│   ├── features/
│   │   └── restaurants/
│   │       ├── Restaurant.tsx
│   │       └── UserFacingRestaurantDetail.tsx
│   └── public/
│       ├── images/
│       └── svg/
├── .env
├── tailwind.config.js
├── drizzle.config.ts
├── next.config.js
└── package.json
```

Key Notes:

- Next.js app router structure with route groups `(public)`
- Drizzle ORM configuration for database models
- Feature-based organization with colocated components
- Admin/public separation with layout preservation
- TypeScript-first approach with strict type definitions

# Restaurant Passport App

A digital punch card and loyalty system built with Next.js, TypeScript, Tailwind CSS, ShadCN UI, and Supabase.

## Features

- Digital Punch Cards: Users earn punches at participating restaurants
- Real-time updates: Instantly see punch card updates via Supabase real-time subscriptions
- Role-Based Authorization: User, Restaurant Admin, System Admin roles
- QR Code Validation: Staff can scan a user's QR code to add a punch instantly
- Prizes & Raffles: Prize management, redemption tracking, and raffle entries
- Points & Achievements: Gamified point transfer system with achievements
- Analytics Dashboard: Restaurant-level analytics for punch cards, user activity, and prize redemptions

## Getting Started

### Prerequisites

- Bun (1.2.4 or higher)
- Node.js (v18 or higher)
- Supabase account (for real-time subscriptions)

### Setup

1. Clone the repository
2. Install dependencies:

   ```
   bun install
   ```

3. Set up environment variables:
   - Copy `.env.example` to `.env.local`
   - Update the required environment variables:

     ```
     # Supabase for real-time subscriptions
     NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
     NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
     
     # Database
     DATABASE_URL=your-database-url
     
     # Clerk Authentication
     NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your-clerk-publishable-key
     CLERK_SECRET_KEY=your-clerk-secret-key
     ```

4. Run the development server:

   ```
   bun dev
   ```

## Real-time Punch Card Subscriptions

The app uses Supabase real-time features to provide instant updates to users when their punch cards change:

1. When a user's punch card is updated (e.g., a new punch is added), Supabase sends a real-time notification
2. The client automatically refreshes the punch card data without requiring a page reload
3. Users see their updated punch cards in real-time

### Implementation

The real-time subscription is implemented using:

- `usePunchCardSubscription` hook: Manages the subscription to punch card changes
- Supabase client: Connects to Supabase real-time API
- API routes: Fetch the latest punch card data when changes occur

## Development

### Using Bun

This project uses Bun as the package manager and runtime. Common commands:

- `bun install`: Install dependencies
- `bun dev`: Start development server
- `bun build`: Build for production
- `bun start`: Start production server
- `bun lint`: Run linting

### Database

Database migrations are managed with Drizzle:

- `bun drizzle:generate`: Generate migrations
- `bun drizzle:migrate`: Apply migrations
````

## File: src/app/admin/restaurants/qr-code-manager.tsx

````typescript
import type React from "react";
import { useState, useRef, useEffect } from "react";
import QRCode from "react-qr-code";
import Image from "next/image";
import { useHandleQRCode } from "@/hooks/use-handle-qrCode";
import type { Restaurant } from "@/types/db";
import {
 Dialog,
 DialogContent,
 DialogTrigger,
 DialogTitle,
 DialogHeader,
 DialogDescription,
 DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
 QrCode,
 Download,
 Plus,
 X,
 Check,
 AlertTriangle,
 HelpCircle,
} from "lucide-react";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
⋮----
type QRCodeVariant = "default" | "compact" | "table";
⋮----
interface QRCodeManagerProps {
 restaurant: Restaurant;
 variant?: QRCodeVariant;
}
⋮----
// Updated download function to convert SVG to PNG with linter fixes and event listener for error
const downloadQRCodeFromElement = (
 element: HTMLDivElement | null,
 restaurantName: string
) =>
⋮----
// Ensure white background
⋮----
// Serialize SVG
⋮----
// Create a blob from SVG data
⋮----
// Attempt to get width/height from SVG attributes, fallback to image dimensions
⋮----
// Fill canvas with white background
⋮----
// Check browser support for download functionality
⋮----
// Safari before 14 and some mobile browsers might have issues with download API
⋮----
// iOS Safari before 14 had issues with download
⋮----
// Table cell variant
⋮----
// Create ref for the QR code in dialog
⋮----
// Direct download function
const handleTableDownload = () =>
⋮----
// Find QR code container within the dialog
⋮----
// Compact variant for smaller spaces
⋮----
// Create a ref for the displayed QR code
⋮----
// Direct download function for the compact QR code
⋮----
// Default full-featured variant
⋮----
// Extracted full QR manager component to avoid duplication
⋮----
// Create refs for the displayed QR codes
⋮----
// Direct download function for the current QR code
⋮----
// Alternative download for iOS Safari
const handleCopyQrValue = () =>
⋮----
// Could add a toast notification here
````

## File: src/components/ui/button.tsx

````typescript
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";
⋮----
export interface ButtonProps
 extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  VariantProps<typeof buttonVariants> {
 asChild?: boolean;
}
⋮----
// Function to combine refs
⋮----
// Update our internal ref
⋮----
// Forward the ref if provided
⋮----
// Add effect to handle fast click for mobile browsers
⋮----
// This class will prevent the 300ms tap delay on mobile browsers
⋮----
// Handle iOS/Safari specific issues with button clicks
const handlePointerDown = (e: PointerEvent) =>
⋮----
// Prevent delayed responses on some mobile browsers
⋮----
// Prevent text selection during tap (iOS issue)
⋮----
// iOS optimization to ensure buttons respond immediately
⋮----
// Call original handler if exists
````

## File: src/db/schema.ts

````typescript
import {
 pgTable,
 bigserial,
 text,
 unique,
 boolean,
 foreignKey,
 jsonb,
 timestamp,
 integer,
 uniqueIndex,
 bigint,
} from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";
````

## File: src/features/restaurants/RestaurantCard.tsx

````typescript
import Image from "next/image";
import Link from "next/link";
import { cn } from "@/lib/utils";
import { ArrowUpRight, Tag } from "lucide-react";
import type { Restaurant, RestaurantDetailPayload } from "@/types/db";
// export function RestaurantCard({ restaurant }: { restaurant: any }) {
//  console.log("🚀 ~ RestaurantCard ~ restaurant:", restaurant);
⋮----
//  return (
//   <div className="rounded-lg shadow-md p-0 overflow-hidden transition-all hover:shadow-lg w-auto">
//    <Image
//     src={"/RWP.jpg"}
//     alt={restaurant.name}
//     height={200}
//     width={200}
//     className="object-cover"
//     // sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
//    />
⋮----
//    <div className="p-4">
//     <h3 className="text-xl font-semibold mb-2">{restaurant.name}</h3>
//     <p className="text-gray-600 text-sm mb-2 line-clamp-2">
//      {restaurant.description}
//     </p>
//     <p className="text-gray-500 text-sm mb-4">{restaurant.address}</p>
//     <Link
//      href={`/restaurants/${restaurant.id}`}
//      className="inline-block bg-blue-600 text-white px-4 py-2 rounded-md text-sm hover:bg-blue-700 transition-colors"
//     >
//      View Details
//     </Link>
//    </div>
//   </div>
//  );
// }
⋮----
// Safely check if there are deals
⋮----
className=
⋮----
{/* <p className="text-xs text-zinc-300 dark:text-zinc-400">
        {restaurant.address}
       </p> */}
````

## File: src/hooks/use-handle-qrCode.tsx

````typescript
import { saveQRCodeUrl } from "@/app/admin/restaurants/actions";
import type { Restaurant } from "@/types/db";
import { useRef, useState, useCallback, useEffect } from "react";
⋮----
export const useHandleQRCode = (
⋮----
// Generate QR code and show save/cancel buttons
⋮----
// Simple QR code value without timestamp
⋮----
setQrCodeDataUrl(null); // Clear previous data URL when generating new
⋮----
// Cancel QR code generation
⋮----
// Reset to original QR code value if exists
⋮----
// Download QR code as image with browser compatibility handling
⋮----
// If we already have a data URL, use it
⋮----
// Otherwise, try to generate one from the current SVG
⋮----
// Clone the SVG to avoid modifying the original
⋮----
// Set attributes that might be needed for better compatibility
⋮----
// Ensure background is white for better visibility
⋮----
// Serialize the SVG with proper XML declaration
⋮----
// Handle download with fallbacks for different browsers
⋮----
// Safari doesn't handle the download attribute well, open in new tab
⋮----
// For other browsers, use the standard approach
⋮----
// Save QR code URL to database with improved error handling
⋮----
// Make sure we have a valid QR code to save
⋮----
// Convert QR code to data URL
⋮----
// Clone and prepare SVG for saving
⋮----
// Ensure dimensions are set
⋮----
// Add white background
⋮----
// Use safe encoding for all browsers
⋮----
// Modern approach - safer for all characters
⋮----
// Fallback to base64 encoding
⋮----
// Save to database
⋮----
// Set the initial QR code value when the component mounts
````

## File: src/types/db.ts

````typescript
/**
 * Type definitions for database models
 */
⋮----
/**
 * User model
 */
export type User = {
 id: bigint;
 clerkId: string;
 name: string;
 isStaff?: boolean | undefined;
 isAdmin?: boolean | undefined;
 email: string;
 phone?: string | null;
 punchCards?: PunchCard[];
 achievements?: Achievement[];
 pointBalances?: PointBalance[];
 raffleEntries?: RaffleEntry[];
};
⋮----
/**
 * Restaurant model
 */
export type Restaurant = {
 id: bigint;
 name: string;
 description: string;
 imageUrl: string;
 address: string;
 deals?: Deal[];
 qrCodeUrl: string | null;
 punchCardCount?: number;
 punchCards?: PunchCard[];
};
⋮----
/**
 * Punch card model
 */
export type PunchCard = {
 id: bigint;
 userId: bigint;
 restaurantId: bigint;
 punches: number;
 completed: boolean;
 updatedAt: Date;
};
⋮----
/**
 * Raffle entry model
 */
export type RaffleEntry = {
 id: bigint;
 userId: bigint;
 punchCardId: bigint;
 createdAt: Date;
};
⋮----
/**
 * Prize rules type
 */
export type PrizeRules = {
 expirationDays?: number;
 usageLimit?: number;
 terms?: string;
 [key: string]: unknown;
};
⋮----
/**
 * Prize model
 */
export type Prize = {
 id: bigint;
 name: string;
 description: string;
 imageUrl: string;
 type: string;
 restaurantId: bigint;
 requiredPunches: number;
 available: boolean;
 quantity: number;
 rules: PrizeRules;
 createdAt: Date;
};
⋮----
export interface RestaurantDetailPayload extends Restaurant {
 prizes: Prize[];
}
⋮----
/**
 * Prize redemption status type
 */
export type RedemptionStatus = "pending" | "redeemed" | "expired" | "cancelled";
⋮----
/**
 * Prize redemption model
 */
export type PrizeRedemption = {
 id: bigint;
 userId: bigint;
 prizeId: bigint;
 punchCardId: bigint;
 status: RedemptionStatus;
 redeemedAt: Date | null;
 expiresAt: Date | null;
 createdAt: Date;
};
⋮----
/**
 * Point balance model
 */
export type PointBalance = {
 id: bigint;
 userId: bigint;
 points: number;
 updatedAt: Date;
};
⋮----
/**
 * Point transfer status type
 */
export type TransferStatus = "pending" | "completed" | "cancelled";
⋮----
/**
 * Point transfer model
 */
export type PointTransfer = {
 id: bigint;
 fromUserId: bigint;
 toUserId: bigint;
 points: number;
 message: string | null;
 status: TransferStatus;
 createdAt: Date;
};
⋮----
/**
 * Achievement type enum
 */
export type AchievementType =
 | "first_transfer"
 | "transfer_milestone"
 | "punch_card_complete"
 | "prize_redemption";
⋮----
/**
 * Achievement data type
 */
export type AchievementData = {
 milestone?: number;
 restaurantId?: bigint;
 prizeId?: bigint;
 [key: string]: unknown;
};
⋮----
/**
 * Achievement model
 */
export type Achievement = {
 id: bigint;
 userId: bigint;
 type: AchievementType;
 data: AchievementData;
 unlockedAt: Date;
};
⋮----
/**
 * Deal model
 */
export type Deal = {
 id: bigint;
 title: string;
 content: string;
 imageUrl: string;
 active: boolean;
 restaurantId: bigint;
 createdAt: Date;
 updatedAt: Date;
};
⋮----
export interface RestaurantDetailPayload extends Restaurant {
 deals?: Deal[];
 prizes?: Prize[];
 punchCards?: PunchCard[];
 dealCount?: number;
 prizeCount?: number;
 punchCardCount?: number;
}
````

## File: src/app/(public)/restaurants/page.tsx

````typescript
import Link from 'next/link'
import Image from 'next/image'
⋮----
import {getRestaurants} from '@/db/models/restaurants/restaurants'
import type {Restaurant} from '@/types/db'
import {RestaurantsList} from '@/features/restaurants/RestaurantList'
⋮----
export interface RestaurantsPageProps {
  searchParams: Promise<{
    deals?: string
  }>
}
⋮----
export default async function RestaurantsPage({
  searchParams,
}: RestaurantsPageProps)
⋮----
// Apply default sorting (A-Z by name)
````

## File: src/features/restaurants/RestaurantList.tsx

````typescript
import {motion} from 'framer-motion'
⋮----
import {RestaurantCard} from './RestaurantCard'
import {RestaurantSearchBar} from './RestaurantSearchBar'
import {useRestaurantSearch} from '@/hooks/useRestaurantSearch'
import type {Restaurant, RestaurantDetailPayload} from '@/types/db'
import {InView} from '@/components/ui/in-view'
⋮----
// Loading component
⋮----
// Create an array of unique identifiers for skeleton items
⋮----
// Restaurants list component
````

## File: src/features/users/UserPunchCard.tsx

````typescript
// import {
//   PunchCard,
//   PUNCH_THRESHOLD,
// } from '@/components/ui/restaurant-specific-user-punch-card'
⋮----
import type {PunchCardWithRestaurant as ApiPunchCardWithRestaurant} from '@/types/api'
import type {PunchCardWithRestaurant as HookPunchCardWithRestaurant} from '@/hooks/use-punch-card-subscription'
import {PunchCard} from '@/components/ui/punchcard'
⋮----
interface UserPunchCardProps {
  restaurants: ApiPunchCardWithRestaurant[] | HookPunchCardWithRestaurant[]
}
⋮----
export function UserPunchCard(
⋮----
// Convert number | null to number for punches
````

## File: src/lib/auth.ts

````typescript
/**
 * Helper functions for authentication and authorization
 */
⋮----
import type { EmailAddress, User } from "@clerk/nextjs/server";
import type { User as DBUser } from "@/types/db";
⋮----
/**
 * Check if a user has admin privileges
 */
⋮----
export function isAdmin(user: User | unknown | DBUser | null): boolean
⋮----
// @ts-ignore
⋮----
/**
 * Check if a user can access an admin resource
 * This can be extended with more granular permissions as needed
 */
export function canAccessAdminResource(user: string | null): boolean
⋮----
/**
 * Check if a user can edit a specific restaurant
 * This is just an example of how you might implement resource-specific permissions
 */
export function canEditRestaurant(
 user: string | null,
 restaurantId: string,
): boolean
⋮----
// Admin can edit any restaurant
⋮----
// In a real app, you might check if the user is the owner of the restaurant
// or has been granted specific permissions
````

## File: next.config.ts

````typescript
import type { NextConfig } from "next";
⋮----
// Determine if we're in production mode
⋮----
/* config options here */
⋮----
// Less strict type checking in production builds
⋮----
// In production, don't fail the build if there are TypeScript errors
⋮----
// Less strict ESLint checking in production builds
⋮----
// In production, don't fail the build if there are ESLint errors
⋮----
// Performance optimizations
// experimental: {
// Reduces build time and potential failures from dependency conflicts
// Improve page loading with prefetching
// ppr: true,
// },
// In development, enable React strict mode
⋮----
// Improve load times with compression
⋮----
// Improve performance with statically exported pages where possible
⋮----
// Improved bundling
⋮----
// Image configuration
````

## File: src/components/admin/restaurant-quick-view.tsx

````typescript
import {useState, type ReactNode} from 'react'
import {Button} from '@/components/ui/button'
import {Eye, Plus} from 'lucide-react'
import {
  createRestaurantDeal,
  getRestaurantByIdWithAll,
} from '@/db/models/restaurants/restaurants'
import type {Restaurant, Prize, PunchCard} from '@/types/db'
import {toast} from 'sonner'
import {BentoGrid} from '@/components/kokonutui/bento-grid'
import {
  Utensils,
  Award,
  CreditCard,
  Users,
  CalendarClock,
  BadgeCheck,
  Tag,
  PlusCircle,
  QrCode,
} from 'lucide-react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog'
import {Input} from '@/components/ui/input'
import {Label} from '@/components/ui/label'
import {Textarea} from '@/components/ui/textarea'
import {Checkbox} from '@/components/ui/checkbox'
import {DealsList, EmptyDeals} from './restaurant-deals-display'
import {QRCodeManager} from '@/app/admin/restaurants/qr-code-manager'
⋮----
// Define the BentoItem interface to match the BentoGrid component's expected types
interface BentoItem {
  id: string
  title: string
  description: string | ReactNode
  icon: ReactNode
  status?: string
  tags?: string[]
  meta?: string
  hasPersistentHover?: boolean
}
⋮----
// Define types for deal
export interface Deal {
  id?: string
  restaurantId: bigint
  title: string
  content: string
  isActive: boolean
}
⋮----
// Define a type for the detailed restaurant with associated data
interface DetailedRestaurant extends Restaurant {
  prizes: Prize[]
  punchCards: PunchCard[]
  punchCardCount: number
  deals?: Deal[] // Add deals to the restaurant data
}
⋮----
deals?: Deal[] // Add deals to the restaurant data
⋮----
interface RestaurantQuickViewProps {
  restaurantId: bigint
}
⋮----
const handleOpen = async () =>
⋮----
// Transform the data to match our expected types
⋮----
// Convert createdAt string to Date safely
⋮----
// Convert updatedAt string to Date safely
⋮----
// Initialize deals with mock data if it doesn't exist
⋮----
// Now we can safely cast to our expected type
⋮----
const handleClose = () =>
⋮----
// Handle opening the deal creation dialog
const handleOpenDealDialog = () =>
⋮----
// Handle creating a new deal
const handleCreateDeal = async () =>
⋮----
// Create a new deal with the form data
⋮----
// Add the new deal to the restaurant data
⋮----
// @ts-ignore
⋮----
// Update the restaurant data
⋮----
// Reset the form and close the dialog
⋮----
// Show a success toast
⋮----
// Convert restaurant data to bento grid items
⋮----
// Create base item for restaurant info
⋮----
// Add QR code section
⋮----
// Add deals section
⋮----
// If no deals, show a card to create the first one
⋮----
// Add punch cards summary item
⋮----
// Add user engagement item
⋮----
// Add recent activity item
⋮----
// Add completion rate item
⋮----
<BentoGrid items=
⋮----
{/* Dialog for creating a new deal */}
⋮----
setNewDeal(
````

## File: src/features/restaurants/restaurant-detail/RestaurantDetail.tsx

````typescript
import {getUserByClerkId} from '@/db/models/users/users'
import {PrizeCard} from '@/features/prizes/prize-card/PrizeCard'
import {UserScanQrCode} from '@/features/users'
import {GetUserRestaurantPunchCard} from '@/features/users/GetUserPunchCard'
import {DealsList} from '@/features/deals'
import {
  PunchCard,
  PUNCH_THRESHOLD,
} from '@/components/ui/restaurant-specific-user-punch-card'
import type {
  Deal,
  PunchCard as PunchCardType,
  RestaurantDetailPayload,
  User,
} from '@/types/db'
import {useUser} from '@clerk/nextjs'
import Image from 'next/image'
import Link from 'next/link'
import {useEffect, useState} from 'react'
import {Badge} from '@/components/ui/badge'
import {
  MapPin,
  Clock,
  Info,
  Gift,
  Tag,
  QrCode,
  User as UserIcon,
} from 'lucide-react'
⋮----
// Convert Deal[] to DatabaseDeal[] for DealsList
⋮----
{/* Hero Section */}
⋮----
src={'/RWP.jpg'} //restaurant.imageUrl ||
⋮----
{/* Bento Grid Layout */}
⋮----
{/* About Section */}
⋮----
{/* User's Punch Card Section */}
⋮----
{/* Deals Section */}
````

## File: tailwind.config.ts

````typescript
import type { Config } from "tailwindcss";
````

## File: src/app/admin/restaurants/[id]/page.tsx

````typescript
import Link from 'next/link'
import Image from 'next/image'
⋮----
import {Suspense} from 'react'
import {auth} from '@clerk/nextjs/server'
import {QRCodeManager} from '../qr-code-manager'
import {getRestaurantById, getPrizesByRestaurantId} from '@/db/models'
import {RestaurantLoading} from '@/features/restaurants/RestaurantLoading'
import {PrizeCard} from '@/features/prizes/prize-card/PrizeCard'
⋮----
// Loading component
⋮----
// Restaurant detail component
⋮----
// Get current user auth status
// const { userId } = await auth();
// const isAuthenticated = !!userId;
⋮----
// Get current user auth status
⋮----
// Main page component
⋮----
xmlns='http://www.w3.org/2000/svg'
⋮----
<RestaurantDetail id=
````

## File: src/app/admin/layout.tsx

````typescript
import { redirect } from "next/navigation";
import { isAdmin } from "@/lib/auth";
import { auth } from "@clerk/nextjs/server";
⋮----
import { AdminUI } from "@/components/admin/admin-ui";
⋮----
// Main layout wrapper - this is a Server Component
export default async function AdminLayout({
 children,
}: {
 children: React.ReactNode;
})
⋮----
// Perform authentication and authorization checks
⋮----
// Redirect non-admins away
⋮----
// Render the admin UI with the SidebarProvider (which uses "use client")
````

## File: src/app/page.tsx

````typescript
import Image from "next/image";
import Link from "next/link";
import { SignInButton, SignOutButton, SignUpButton } from "@clerk/nextjs";
import { auth, type Session } from "@clerk/nextjs/server";
````

## File: src/app/admin/restaurants/page.tsx

````typescript
import Link from "next/link";
import Image from "next/image";
import { Suspense } from "react";
import { getRestaurants } from "@/db/models";
import type { restaurantSchema } from "@/types/schemas";
import { RestaurantsTable } from "@/components/admin/restaurants-table";
import type { z } from "zod";
⋮----
// Type for restaurant data
type Restaurant = z.infer<typeof restaurantSchema>;
⋮----
// Loading component
function RestaurantsLoading()
⋮----
// Restaurant card component
function RestaurantCard(
⋮----
// Restaurants list component with table
async function RestaurantsList(
⋮----
// Fetch restaurants from the database
⋮----
// Main page component
````

## File: src/app/users/[id]/profile/page.tsx

````typescript
import {UserButton} from '@clerk/nextjs'
import {getUserByClerkId} from '@/db/models/users/users'
import {auth} from '@clerk/nextjs/server'
⋮----
import {UserPunchCards} from '@/features/users/UserPunchCards'
import {BentoGrid} from '@/components/kokonutui/bento-grid'
import {usePunchCardSubscription} from '@/hooks/use-punch-card-subscription'
⋮----
// Define viewport metadata as per Next.js recommendations
⋮----
export default async function ProfilePage()
⋮----
{/* Display user's punch cards with real-time updates */}
⋮----
{/* {user?.id && <UserScanQrCode user={user} />} */}
⋮----
{/* TODO: Add Bento Grid UI header */}
````

## File: src/components/admin/Sidebar.tsx

````typescript
import React, { useEffect, useRef, useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { SignOutButton, useUser } from "@clerk/nextjs";
import { useSidebar } from "./SidebarContext";
import Image from "next/image";
import {
 LayoutDashboard,
 Users,
 Store,
 Settings,
 Gift,
 Trophy,
 Globe,
 ChevronDown,
 ChevronRight,
 LogOut,
 Menu,
 X,
} from "lucide-react";
⋮----
// Toggle submenu
const toggleSubmenu = (title: string) =>
⋮----
// Check if a menu item is active
const isActive = (href: string) =>
⋮----
// Check if a submenu item is active
const isSubmenuActive = (href: string) =>
⋮----
// Mobile menu
const toggleMobileMenu = () =>
// Custom hook to get previous value
⋮----
// Example usage: track previous pathname
⋮----
{/* Mobile menu button */}
⋮----
{/* Overlay for mobile */}
⋮----
{/* Sidebar */}
⋮----
{/* Logo and collapse button */}
⋮----
{/* <Link href="/admin" className="flex items-center space-x-3">
   
     </Link> */}
⋮----
{/* User info */}
⋮----
{/* Navigation */}
⋮----
{/* Submenu */}
````

## File: src/features/users/UserPunchCards.tsx

````typescript
import {Card, CardContent, CardHeader, CardTitle} from '@/components/ui/card'
import {Spinner} from '@/components/ui/spinner'
import Image from 'next/image'
import Link from 'next/link'
import {AnimatePresence, motion} from 'framer-motion'
import type {User} from '@/types/db'
import {UserPunchCard} from '@/features/users/UserPunchCard'
import {
  usePunchCardSubscription,
  type PunchCardWithRestaurant,
} from '@/hooks/use-punch-card-subscription'
import {useEffect, useState} from 'react'
import {useSearchParams} from 'next/navigation'
import {cn} from '@/lib/utils'
import {type Badge, Award} from 'lucide-react'
import React from 'react'
import {LotteryStatus} from '@/features/users/lottery-status'
import {SharePunchMenu} from '@/features/users/share-punch-menu'
import {Passport} from '@/features/users/passport'
⋮----
interface UserPunchCardsProps {
  user: User | Record<string, unknown>
  initialPunchCards?: PunchCardWithRestaurant[]
}
⋮----
// Use static data display if we can't get the user ID
⋮----
// Extract user ID safely, ensuring it's a bigint
⋮----
// If id is already a bigint, use it
⋮----
// If id is a number or string, convert to bigint
⋮----
// Use the real-time subscription hook only when we have a valid bigint userId
⋮----
// Use the data from the subscription or the initial data
⋮----
// Set the highlighted card when we have punch cards and a highlight parameter
⋮----
// Find the punch card with the matching restaurant ID
⋮----
// Auto-scroll to the highlighted card
⋮----
// Remove the highlight after 5 seconds
⋮----
// If loading and no initial punch cards
⋮----
// If error and no punch cards to display
⋮----
// If no punch cards
⋮----
{/* {currentPunches} of {MAX_PUNCH_THRESHOLD} punches */}
⋮----
{/* Punch indicators as horizontal dots */}
````

## File: src/db/models/restaurants/restaurants.ts

````typescript
import { eq } from "drizzle-orm";
import { db } from "../../db";
import { restaurants, prizes, punchCards, restaurantDeals } from"@/db/drizzle/schema"
import { getPrizesByRestaurantId } from "@/db/models/prizes";
⋮----
export const getRestaurants = async () =>
⋮----
// Get all restaurants and only load essential relations
⋮----
// Add count metadata to each restaurant
⋮----
export const getPaginatedRestaurants = async (page = 1, pageSize = 10) =>
⋮----
// Get paginated restaurants and only load essential relations
⋮----
// First get total count for pagination metadata
⋮----
// Then get the paginated data
⋮----
// Add count metadata to each restaurant
⋮----
// Return both the restaurants and pagination metadata
⋮----
export const getDeals = async () =>
export const getActiveDeals = async () =>
⋮----
export const getRestaurantById = async (id: bigint) =>
⋮----
export const getRestaurantByIdWithPrizesAndDeals = async (id: bigint) =>
⋮----
// Removed console.log for production performance
⋮----
export const getRestaurantByIdWithAll = async (id: bigint) =>
⋮----
export const createRestaurant = async (data: {
 name: string;
 description: string;
 imageUrl: string;
 address: string;
 qrCodeUrl?: string;
}) =>
⋮----
export const updateRestaurant = async (
 id: bigint,
 data: Partial<{
  name: string;
  description: string;
  imageUrl: string;
  address: string;
  qrCodeUrl: string;
 }>,
) =>
⋮----
export const deleteRestaurant = async (id: bigint) =>
⋮----
export const createRestaurantDeal = async (data: {
 restaurantId: bigint;
 title: string;
 content: string;
 active: boolean;
}) =>
⋮----
export const updateRestaurantDeal = async (
 id: bigint,
 data: Partial<{
  restaurantId: bigint;
  title: string;
  content: string;
  active: boolean;
 }>,
) =>
⋮----
export const deleteRestaurantDeal = async (id: bigint) =>
````

## File: src/app/layout.tsx

````typescript
import type {Metadata} from 'next'
import {Geist, Geist_Mono} from 'next/font/google'
import {ClerkProvider} from '@clerk/nextjs'
⋮----
import {LocationProvider} from '@/context/location-context'
import {Analytics} from '@vercel/analytics/react'
import {Nav} from '@/components/nav/nav'
import {Toaster} from '@/components/ui/sonner'
import {UserProvider} from '@/context/user-context'
⋮----
import {StyleWrapper} from '@/context/style-wrapper'
⋮----
// viewport:
// "width=device-width, initial-scale=1.0, maximum-scale=5.0, viewport-fit=cover",
⋮----
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>)
⋮----
{/* <Analytics /> */}
````

## File: src/components/admin/restaurants-table.tsx

````typescript
import {
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  getPaginationRowModel,
  useReactTable,
  type ColumnDef,
  type Row,
  type Column,
  type Table as TanstackTable,
  type SortingState,
} from '@tanstack/react-table'
import {
  Check,
  X,
  Edit,
  ChevronLeft,
  ChevronRight,
  Image as ImageIcon,
  Building,
  MapPin,
  QrCode,
  MoreHorizontal,
  Trash2,
  ExternalLink,
  Save,
  Download,
  FileSpreadsheet,
  Upload,
  ChevronsLeft,
  ChevronsRight,
} from 'lucide-react'
import {Checkbox} from '@/components/ui/checkbox'
import type {z} from 'zod'
import type {restaurantSchema} from '@/types/schemas'
import type {Restaurant} from '@/types/db'
import {QRCodeManager} from '@/app/admin/restaurants/qr-code-manager'
import {useRouter} from 'next/navigation'
import {
  updateRestaurantAction,
  deleteRestaurantAction,
  importRestaurantsFromCSV,
} from '@/actions/restaurants'
import {toast} from 'sonner'
import {useRestaurantSearch} from '@/hooks/useRestaurantSearch'
import {AdminRestaurantSearchBar} from '@/features/restaurants/AdminRestaurantSearchBar'
import {RestaurantQuickView} from './restaurant-quick-view'
import {useHandleBulkQRCode} from '@/hooks/use-handle-bulk-qr-code'
import {Progress} from '@/components/ui/progress'
import {exportToCSV} from '@/lib/csv'
import {CSVUpload} from '@/components/admin/csv-upload'
⋮----
// Styled components imports
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {Button} from '@/components/ui/button'
import {Input} from '@/components/ui/input'
import {Badge} from '@/components/ui/badge'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {cn} from '@/lib/utils'
⋮----
// Define interfaces for TanStack Table metadata
interface ColumnMeta {
  editable?: boolean
}
⋮----
interface TableMeta {
  updateData: (rowIndex: number, columnId: string, value: unknown) => void
}
⋮----
// Type for restaurant from schema
type RestaurantData = z.infer<typeof restaurantSchema>
⋮----
// Add the extended Restaurant type to include deals
type ExtendedRestaurant = Restaurant & {
  punchCardCount?: number
  deals?: {id: string; title: string; isActive: boolean}[]
}
⋮----
// Props for editable cells
type EditableCellProps = {
  getValue: () => unknown
  row: Row<RestaurantData>
  column: Column<RestaurantData, unknown>
  table: TanstackTable<RestaurantData>
}
⋮----
// Type for row selection state
type RowSelectionState = Record<string, boolean>
⋮----
// Helper function for sorting indicators
const getSortingIcon = (state: 'asc' | 'desc' | false) =>
⋮----
// Editable cell component
⋮----
// Update local value when row data changes
⋮----
const onBlur = () =>
⋮----
const onEditClick = () =>
⋮----
const onCancelClick = () =>
⋮----
const onSaveClick = () =>
⋮----
// Non-editable columns
⋮----
title=
⋮----
// Get appropriate icon based on column
const getColumnIcon = () =>
⋮----
// Track selection count for visibility check
⋮----
// Add bulk QR code generation hook
⋮----
// Check viewport size on mount and window resize
⋮----
const checkViewport = () =>
⋮----
// Initial check
⋮----
// Set up event listener for resize
⋮----
// Clean up
⋮----
// Add restaurant search hook
⋮----
// Update local data when initialData changes
⋮----
// Define a handler for toggling selection
const handleToggleRow = (rowId: string, selected: boolean) =>
⋮----
// Define a handler for toggling all selection
const handleToggleAllRows = (selected: boolean) =>
⋮----
// Only select rows on the current page, not all filtered rows
⋮----
// Define columns for the table
⋮----
// {
//   accessorKey: 'address',
//   header: ({column}) => (
//     <div className='flex items-center gap-0.5'>
//       Address
//       <Button
//         size='sm'
//         variant='ghost'
//         className='h-8 w-8 ml-1 p-0'
//         onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
//       >
//         {getSortingIcon(column.getIsSorted())}
//       </Button>
//     </div>
//   ),
//   cell: EditableCell,
// },
// {
//  accessorKey: "imageUrl",
//  header: "Image URL",
//  cell: EditableCell,
// },
⋮----
// Handle view restaurant details
⋮----
// Handle saving edited data using server action
const handleSave = async (rowIndex: number, restaurant: RestaurantData) =>
⋮----
// Reset to original data if update failed
⋮----
// Handle restaurant deletion
const handleDelete = async () =>
⋮----
// Remove from local state
⋮----
// Define data table using TanStack
⋮----
// Adjust page size to a more reasonable number
⋮----
// Fix to handle row selection properly with pagination
⋮----
// Find actual restaurant by ID to handle filtered restaurants correctly
⋮----
// Save changes to the database
⋮----
// Update the bulk operations to use table row IDs for selection
const handleBulkGenerate = () =>
⋮----
// Update CSV export to use table row selections
⋮----
// Determine which restaurants to export
⋮----
// Create a clean export data structure with only the fields we want
⋮----
// Export to CSV with all columns from our clean data structure
⋮----
// Add handler for CSV import
⋮----
// Force refresh to get updated data
⋮----
{/* Selection indicator and bulk actions */}
⋮----
{/* Bulk Actions Toolbar */}
⋮----
{/* Export dropdown */}
⋮----
{/* QR code generation button */}
⋮----
{/* QR code actions when applicable */}
⋮----
{/* Progress bar for bulk operations */}
⋮----
{/* Error and success messages */}
⋮----
{/* Mobile card view with selection support */}
⋮----
{/* Mobile card content */}
⋮----
{/* Restaurant Image if available */}
⋮----
{/* Status badges and info */}
⋮----
{/* QR Code */}
⋮----
{/* Punch Cards Count */}
⋮----
{/* Deals Count */}
⋮----
{/* Quick View Button */}
⋮----
{/* Desktop table view */}
⋮----
{/* Pagination controls - work for both mobile and desktop */}
⋮----
disabled=
⋮----
{/* Confirmation dialog for restaurant deletion */}
````

## File: src/components/nav/nav.tsx

````typescript
import type React from 'react'
import {Button} from '@/components/ui/button'
import {cn} from '@/lib/utils'
import Link from 'next/link'
⋮----
import {
  SignedIn,
  SignInButton,
  SignOutButton,
  SignUp,
  SignUpButton,
  useSession,
  useUser,
} from '@clerk/nextjs'
import {
  Award,
  Clock,
  Home,
  Settings,
  Trophy,
  type User,
  Utensils,
  UserPlus,
  Loader2,
  QrCode,
  CheckCircle,
  Wallet2,
  MedalIcon,
  QrCodeIcon,
  Tag,
  Settings2,
  BookUser,
} from 'lucide-react'
import {motion, AnimatePresence} from 'framer-motion'
import {useCallback, useState, useEffect} from 'react'
⋮----
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from '@/components/ui/dialog'
import {NavScanner} from '@/components/nav/nav-scanner'
⋮----
import {useUserContext} from '@/context/user-context'
⋮----
export type NavProps = {
  initialActiveTab?: string
  onTabChange?: (tabId: string) => void
}
⋮----
type NavItem = {
  id: string
  icon?: React.ElementType
  label: string
  href?: string
  action?: string
}
⋮----
// Create a simple spinner component
⋮----
// Animation variants for the QR scanner and content
⋮----
// NavScanner is now just a button that triggers the modal
type NavScannerButtonProps = {
  onScanClick: () => void
}
⋮----
const toggleModal = () =>
⋮----
{/* QR Scanner Modal with animations */}
⋮----
className=
````

## File: package.json

````json
{
  "name": "restaurant-passport-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "bun --bun next dev",
    "build": "bun --bun next build",
    "start": "bun --bun next start",
    "lint": "bun --bun next lint",
    "storybook": "storybook dev -p 6006",
    "build:storybook": "storybook build",
    "new": "plop",
    "drizzle:generate": "bun drizzle-kit generate --config=./drizzle.config.ts",
    "drizzle:migrate": "bun drizzle-kit migrate --config=./drizzle.config.ts",
    "scrape": "bash scripts/run-scraper.sh"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.2.5",
    "@clerk/nextjs": "^6.12.5",
    "@gsap/react": "^2.1.2",
    "@hookform/resolvers": "^4.1.3",
    "@mendable/firecrawl-js": "^1.19.1",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@silk-hq/components": "^0.8.13",
    "@supabase/supabase-js": "^2.49.1",
    "@tanstack/react-table": "^8.21.2",
    "@types/file-saver": "^2.0.7",
    "@types/jszip": "^3.4.0",
    "@vercel/analytics": "^1.5.0",
    "@yudiel/react-qr-scanner": "^2.2.1",
    "ai": "^4.1.61",
    "axios": "^1.8.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.40.0",
    "drizzle-zod": "^0.7.0",
    "file-saver": "^2.0.5",
    "framer-motion": "^12.5.0",
    "fuse.js": "^7.1.0",
    "gsap": "^3.12.7",
    "jszip": "^3.10.1",
    "lucide-react": "^0.482.0",
    "next": "15.2.2",
    "next-themes": "^0.4.6",
    "nuqs": "^2.4.1",
    "openai": "^4.87.3",
    "papaparse": "^5.5.2",
    "pg": "^8.14.0",
    "postgres": "^3.4.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-qr-code": "^2.0.15",
    "react-qr-reader": "^3.0.0-beta-1",
    "react-qr-scanner": "^1.0.0-alpha.11",
    "sonner": "^2.0.1",
    "svix": "^1.61.4",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "usehooks-ts": "^3.1.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^3.2.6",
    "@eslint/eslintrc": "^3.3.0",
    "@storybook/addon-essentials": "^8.6.10",
    "@storybook/addon-onboarding": "^8.6.10",
    "@storybook/blocks": "^8.6.10",
    "@storybook/experimental-addon-test": "^8.6.10",
    "@storybook/experimental-nextjs-vite": "^8.6.10",
    "@storybook/nextjs": "^8.6.10",
    "@storybook/react": "^8.6.10",
    "@storybook/test": "^8.6.10",
    "@tailwindcss/postcss": "^4.0.14",
    "@types/node": "^22.13.10",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitest/browser": "^3.0.8",
    "@vitest/coverage-v8": "^3.0.8",
    "buffer": "^6.0.3",
    "crypto-browserify": "^3.12.1",
    "drizzle-kit": "^0.30.5",
    "eslint": "^9.22.0",
    "eslint-config-next": "15.2.2",
    "eslint-plugin-storybook": "^0.12.0",
    "playwright": "^1.51.0",
    "plop": "^4.0.1",
    "postcss": "^8.5.3",
    "storybook": "^8.6.10",
    "stream-browserify": "^3.0.0",
    "tailwindcss": "^4.0.14",
    "typescript": "^5.8.2",
    "util": "^0.12.5",
    "vitest": "^3.0.8"
  },
  "eslintConfig": {
    "extends": [
      "plugin:storybook/recommended"
    ]
  }
}
````
