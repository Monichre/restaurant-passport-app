---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## HEADERS

This document defines the rules and guidelines for the AI coding assistant. It covers project standards, tech stack, workflow, and best practices. All generated code must adhere to these rules.

## TECH STACK

-   Next.js
-   React
-   TypeScript
-   Tailwind CSS
-   Supabase
-   Drizzle ORM
-   Lucide React
-   Framer Motion
-   canvas-confetti
-   zod
-   bun
-   `@yudiel/react-qr-scanner`
-   `usehooks-ts`
-   `@vercel/edge-functions`
-   `@sentry/nextjs`

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

-   Use `@` to reference components, files, or data structures (e.g., `@AdminDashboardPage()`, `@useRaffleEntriesSubscription.tsx`, `@models`).
-   When referring to a UI element, use the format `@ComponentName`.
-   When referring to a file, use the format `@filename.ext`.
-   When referring to a function or data structure, use the format `@functionName` or `@dataStructureName`.

## UI DESIGN & COMPONENTS

-   When creating UI, use loading states, error states, and empty states to provide a polished user experience.
-   When displaying lists of data, use responsive grid layouts.
-   When displaying key information, use cards.
-   When displaying data in a tabular format, use the ui/table component.
-   Ensure components are well-structured and maintainable.
-   Increase contrast between dashboard components using borders and background colors to clearly distinguish sections.
-   When addressing UI change requests:
    - Analyze the request to understand the user's goal.
    - Identify the affected element(s) using the provided URL and selected elements.
    - Understand the context of the element within the page structure.
    - Pay attention to styling inconsistencies, such as absolute positioning, background gradients, and typography.
    - Propose concise fixes, focusing on removing conflicting styles and applying consistent styling from similar elements (e.g., the "hero div").
    - Remove `absolute inset-0` unless an overlay is explicitly required.
    - Remove any background gradient classes (e.g., `bg-gradient-to-*`, `from-*`, `to-*`) unless explicitly requested.
    - Apply the same typography classes as semantically similar elements (e.g., hero div) (e.g., `text-4xl font-bold text-gray-900`).
    - Ensure elements are positioned and styled consistently with the overall design.
-   The `@restaurant-quick-view.tsx` component should display the restaurant's image from the `image_url` field on the restaurant database model. The image should be positioned prominently at the top of the restaurant information card in the BentoGrid layout. Use the Next.js `Image` component for optimized image handling. Ensure conditional rendering so that the image is only displayed if `restaurantData.imageUrl` exists. The image should have a fixed height (192px) and maintain its aspect ratio. Use rounded corners and proper overflow handling. Provide descriptive alt text using the restaurant name.
-   The restaurant image in the quick view should be editable and updatable, allowing admins to upload new restaurant images using the `@storage.ts` module. The component should display an interactive image display with the following features:
    - **Existing Image**: Hover overlay with "Change Image" button.
    - **No Image**: Placeholder with "Upload Image" button.
    - **Loading States**: Spinner and progress indicators during upload.
    - Uses the `uploadRestaurantImage()` function from the `@storage.ts` module.
    - Validates file types (JPEG, PNG, WebP, SVG only).
    - Enforces 50MB file size limit.
    - Generates public URLs for uploaded images.
    - Updates local restaurant data after successful upload.
    - Propagates changes to parent component via callback.
    - Updates the database with the new image URL.
    - Implements client-side file validation before upload.
    - Displays toast notifications for success/error states.
    - Provides comprehensive error logging and graceful failure handling.
    - Uses smooth hover transitions and visual feedback.
    - Uses a hidden file input for a clean UI.
    - Implements loading states with spinner animations.
    - Includes clear visual indicators for interactive elements.
    - When no image is available, display a placeholder with an upload button.
    - When an image is available, display an overlay with a "Change Image" button on hover.
    - The `imageUrl` from `@db.ts @Restaurant` should get updated to the URL of the newly uploaded image on save in the `@restaurant-quick-view.tsx`.
    - When the `imageUrl` is updated in the `@restaurant-quick-view.tsx` component, ensure that the component receives the new `imageUrl` from the server action, the local `restaurantData` state is updated with the new `imageUrl`, and the UI immediately reflects the newly uploaded image.
-   When styling the restaurant detail hero section in `@RestaurantDetail.tsx`, apply the hero styles from `@RestaurantsHero.tsx`, including enhanced styling, animations, and visual effects. This includes:
    -   Wrapping the component in `<AnimatePresence>` for smooth transitions.
    -   Adding fade-in effects with staggered timing using `motion` animations.
    -   Including two animated sparkle elements that float and rotate.
    -   Applying `BoxReveal` to text elements for dramatic reveal effects.
    -   Using responsive design with better mobile/desktop breakpoints.
    -   Enhancing image object positioning and brightness filter.
    -   Using larger, more dramatic text with drop shadows.
    -   Maintaining a color scheme consistent with the app's green branding (#208F54).
    -   Adding a decorative SVG wave at the bottom.
    -   Improving contrast and readability of overlays.
    -   Integrating the distance display into the hero with attractive styling.
    -   Using the `useMediaQuery` hook for responsive behavior.
    -   Employing flexible heights for different screen sizes.
    -   Improving spacing with better padding and margins across devices.
    -   Centering content for better visual balance.
    -   Staggering animations for smooth flow.
-   When creating company cards, use the following UI structure:
    -   The card should have an image, title, description, and a list of tags.
    -   The card should have a link to an external site.
    -   The card should use the Material Symbols Outlined font for the link icon.
    -   The card should have a hover effect.
    -   The card should have a consistent color scheme.
    -   Each card should include an image, a title (h3), a description (p), and a list of tags (ul > li).
    -   The tags should be styled with different background colors based on their category (e.g., branding, packaging, marketing).
    -   The link icon should be an arrow_outward icon from Material Symbols Outlined.
    -   The card should have a visually distinct inner section with a background color.
    -   The card should use a grid layout for responsiveness.
-   When updating `@page.tsx` or any page layout, follow these guidelines based on the visual specifications:
    -   **Global Canvas & Grid**:
        -   Viewport size: 414px × 896px (mobile portrait).
        -   Primary layout: Single-column, centered content with 24px horizontal margins.
        -   Content width: 366px (414px - 48px margins).
        -   Layout type: Fixed mobile layout, vertically scrollable.
        -   Background: Cream/off-white (#F5F2ED) with subtle decorative elements. Use `--bg-canvas` color token.
    -   **Color Tokens**:
        -   Use the defined color tokens for consistent styling. Refer to the `VISUAL_SPEC.md` for specific token usages.
    -   **Typography Scale**:
        -   Adhere to the specified typography scale for headers, body text, and buttons. Use the provided Tailwind CSS classes (e.g., `text-2xl-bold`, `text-lg-regular`).
    -   **Component Dimensions and Spacing**:
        -   Ensure components match the specified dimensions and spacing.
        -   Header Section: 366px × 120px, 24px top margin, 32px bottom margin.
        -   Logo Badge: 200px × 200px, center-aligned, 32px top margin.
        -   Content Section: 366px × 140px, 40px top margin from logo.
        -   Button Group: 366px × 48px, 40px top margin.
        -   Bottom Navigation: 366px × 64px, fixed bottom, 24px margins.
    -   **Layout & Spacing Details**:
        -   Main container: 414px × 896px, `--bg-canvas`.
        -   Content padding: 24px horizontal, 40px top.
        -   Vertical spacing: Header to logo: 32px, Logo to content: 40px, Content to buttons: 40px.
    -   **Interaction & Motion Cues**:
        -   Button hover: Slight opacity reduction (0.9), 150ms ease transition.
        -   Button press: Scale down (0.95), 100ms ease transition.
    -   **Accessibility Checks**:
        -   Ensure contrast ratios meet accessibility standards.
        -   Touch targets should be at least 44px.
        -   Use appropriate ARIA roles for navigation and buttons.
    -   **Assets & Iconography**:
        -   Use the specified icons (maple leaf, restaurant icons, navigation icons) with the correct dimensions and colors.
    -   **Bottom Navigation**:
        -   Fixed positioning, 24px from edges, likely sticky/fixed positioning.
-   When placing decorative SVG images randomly throughout the `@page.tsx` or similar pages:
    -   Create a dedicated component to manage these decorative elements (e.g., `DecorativeElements`).
    -   Position the component absolutely in the background of the page content.
    -   Use `pointer-events-none` to prevent the decorative elements from interfering with user interactions.
    -   Incorporate subtle animations for a polished user experience.
    -   Use variable opacity (0.10 - 0.18) for subtle visual effect.
    -   Add blur effects on some elements for depth.
    -   Use drop shadows for dimension.
    -   Ensure responsive sizing, scaling from 48px on mobile to 96px on desktop.
    -   Hide some elements on mobile to reduce clutter.
    -   Load images lazily using `priority={false}`.
    -   Use the following SVG assets: `/Burger.svg`, `/Fried.svg`, `/IceCream.svg`, `/Picklball.svg`, `/Pizza.svg`, `/Salad.svg`, `/Shop.svg`, `/Taco.svg`.
    -   The decorative element should have an initial fade-in with staggered delays and continuous floating motion (4-8 seconds duration) with subtle rotation effects.
-   The `SharePunchMenu` component in `src/features/users/share-punch-menu.tsx` is a floating social sharing widget. It should be positioned as a floating action button (`absolute bottom-[140px] z-50 right-[-25px]`) and include a circular trigger button with a Share icon. It should expand into a vertical menu when clicked with smooth animations using Framer Motion. The component should provide multiple sharing methods: Native Share API, Facebook, Twitter, Instagram, and Copy Link. It should use `generateShareUrls()` for dynamic content generation with a default `shareContent` object containing the title, description, URL, and hashtags for the shared content. In `@passport.tsx`, the `SharePunchMenu` component should be rendered to allow users to share their restaurant passport progress/achievements. Styling and size of the share button should be adjusted to ensure visual consistency with the application's design. When implementing the `SharePunchMenu` component, ensure the following:
    - The component is imported in `passport.tsx` and rendered inside the `Passport` component's return statement.
    - The component's `shareContent` prop is populated with the following information:
        - `title`: A string that includes the number of restaurant visits made by the user. Example: `Check out my ${currentPunches} restaurant visits!`
        - `description`: A string describing the user's progress and the rewards they've earned. Example: `I've been exploring amazing local restaurants and just earned ${currentPunches} stamps in my dining passport.`
        - `url`: The current URL of the page.
        - `hashtags`: An array of hashtags related to the app and the user's location. Example: `['RestaurantPassport', 'FoodieLife', 'LocalEats', 'MapleGrove']`
    - Potential use cases include:
        - Achievement Sharing: When users complete their passport or reach milestones.
        - Restaurant Discovery: Sharing specific restaurant experiences.
        - Progress Updates: Sharing current punch count progress.
        - Social Engagement: Encouraging friends to join the app.
    - The component should provide the following features:
        - Smart Platform Detection: Shows native share on mobile devices.
        - Cross-Platform URLs: Generates appropriate sharing URLs for each platform.
        - Clipboard Fallback: Copy link option for unsupported platforms.
        - Visual Feedback: Animations and success states.
    - When integrating the `SharePunchMenu` component in `@passport.tsx`:
        - Position the component in the top-right corner of the passport card header.
        - Use relative positioning for the button.
        - Reduce the button size to `size-12` (48px).
        - Use a semi-transparent white background (`bg-white/90 backdrop-blur-sm`) with a border for better definition.
        - Update the Share icon to `text-gray-700 size={18}`.
        - Adjust animation y values from `-56px` to `-48px` to match the smaller button.
        - Reduce avatar size from `size-10` to `size-6`.
        - Add `rounded-full` to the success state background.
        - Change dropdown positioning to `absolute top-0 left-0 z-50`.
        - Update dropdown styling to a white background with a shadow.
        - Improve animation with a scale effect.
        - Set a minimum width for better appearance.
-   Replace all `img` tags with Next.js `Image` component. Add proper `width` and `height` attributes.
-   Use React.lazy for heavy components. Example: `const RestaurantDetail = lazy(() => import('./RestaurantDetail'));`

## DATA FETCHING & API

-   Use Drizzle ORM for database interactions.
-   Use server actions for data mutations.
-   When fetching data, handle loading states, error states, and empty states.
-   When creating API endpoints, implement proper error handling.
-   When fetching data for a specific user, filter the data by user ID.
-   When real-time updates are required, use Supabase subscriptions.
-   Use Next.js `unstable_cache` for server-side caching. Example:
    ```typescript
    import { unstable_cache } from 'next/cache';
    
    export const getCachedRestaurants = unstable_cache(
      async () => getRestaurants(),
      ['restaurants'],
      { revalidate: 300 } // 5 minutes
    );
    ```

## AUTHENTICATION & AUTHORIZATION

-   (Deprecated) Authentication and authorization checks are no longer required for raffle entries API routes.
-   When a new user is created, update the Clerk user's metadata with the Supabase user ID. Use `privateMetadata` to store this sensitive linking information, as it should only be accessible from the backend.
    -   After creating a user in Supabase, update the corresponding Clerk user's `privateMetadata` with the Supabase user ID. This allows linking Clerk users to their database records.
    -   Access the Supabase user ID from `user.privateMetadata.supabaseUserId` on the backend.
    -   Ensure the bigint user ID is converted to a string for metadata storage.
-   Admin routes must implement proper Role-Based Access Control (RBAC) using Clerk's role management.
-   Replace hardcoded admin IDs with environment variables:
    ```typescript
    const ADMIN_AUTH_IDS = process.env.ADMIN_CLERK_IDS?.split(',') || [];
    ```

## DEBUGGING

-   (Deprecated) Use `console.log` statements to debug code.
-   Inspect network requests in the browser's developer tools to debug API calls.
-   Inspect React component state using React Developer Tools.
-   Remove all `console.log` statements from production code. Add ESLint rule: `"no-console": ["error", { "allow": ["warn", "error"] }]`.

## WORKFLOW & RELEASE RULES

-   Create a pull request for each new feature or bug fix.
-   Get code reviewed before merging.
-   Run tests before deploying.
-   Use SpecStory to generate documentation.

## NAMING CONVENTIONS

-   Use descriptive names for variables and functions.
-   Use consistent naming conventions throughout the project.
-   For subscription hooks, use the format `use[ComponentName]Subscription`. If singular is more appropriate, use that. Example: `useRestaurantSubscription` instead of `useRestaurantsSubscription`.

## ERROR HANDLING

-   Handle errors gracefully.
-   Display user-friendly error messages.
-   Log errors to the console.
-   Implement proper error boundaries and monitoring. Consider using Sentry.

## CODE ORGANIZATION

-   Keep components small and focused.
-   Use a modular code structure.
-   Separate UI components from business logic.

## DATABASE INTERACTIONS

-   Use Drizzle ORM for all database interactions.
-   Create CRUD functions for each database model.
-   Use Supabase for real-time subscriptions.
-   Add composite indexes to the database for frequently used queries. Examples:
    ```sql
    CREATE INDEX idx_punch_cards_user_restaurant ON punch_cards(user_id, restaurant_id);
    CREATE INDEX idx_raffle_entries_user ON raffle_entries(user_id);
    CREATE INDEX idx_restaurant_deals_active ON restaurant_deals(restaurant_id, active);
    ```
-   Implement database connection pooling. Example:
    ```typescript
    import { Pool } from 'pg';
    const pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      max: 20,
      idleTimeoutMillis: 30000,
    });
    ```

## STATE MANAGEMENT

-   Use React's `useState` hook for local component state.
-   Use React Context for global state.
-   Use refs for values that should not trigger re-renders.

## ANIMATIONS

-   Use Framer Motion for animations.
-   Use canvas-confetti for confetti animations.

## IMAGE HANDLING

-   Configure Next.js Image component for external image sources.
-   Use Next.js Image component for optimized image loading.
-   The `domains` array in `next.config.js` should contain just the hostname portion, without protocols or trailing slashes.
-   Remove wildcard domains from `next.config.js`. Example:
    ```typescript
    remotePatterns: [
      { protocol: "https", hostname: "hvjiuuzpupgmckuyfahe.supabase.co" },
      { protocol: "https", hostname: "experiencemaplegrove.com" },
    ]
    ```
-   For admin operations like restaurant image uploads, use server-side upload instead of client-side uploads to prevent Row-Level Security (RLS) policy violations.
    - To facilitate this, create a **server action** that handles image upload using **server-side storage functions** with proper permissions.
    - Use `uploadFileServer` in server actions, as it has proper server-side permissions.
    - The component should create `FormData` and call the server action.
    - If you exclusively use Storage from trusted clients, such as your own servers, and need to bypass the RLS policies, you can use the service key in the Authorization header. Service keys entirely bypass RLS policies, granting you unrestricted access to all Storage APIs.
    -   You must add the `SUPABASE_SERVICE_ROLE_KEY` environment variable to your `.env.local` file and restart your development server.

## TABLE DISPLAY

-   When using tables, ensure that `<td>` elements are direct children of `<tr>` elements. Avoid nesting `<td>` elements inside `<div>` elements.
-   Use `motion(TableRow)` to animate table rows. The animation properties should be directly on the table row component.
-   Ensure pagination state is properly preserved when data updates.
-   Use explicit state management for pagination to avoid unexpected resets.

## DEVELOPMENT TOOLING

-   Use Stagewise dev-tool for AI-powered editing capabilities in development.
-   Install the `@stagewise/toolbar-next` package for Next.js projects.
-   Create a `StagewiseDevToolbar` component that only renders in `development` mode.
-   Include `<StagewiseDevToolbar />` in `src/app/layout.tsx`.
-   Ensure the Stagewise toolbar is not included in production builds.

## QR CODE SCAN FUNCTIONALITY

-   When implementing QR code scan functionality, consider the following user journeys:
    - Authenticated user scans to action.
    - Unauthenticated user scans QR code generated by authenticated user for referral.
    - Unregistered user scans a QR code at a participating restaurant to join the app.
-   For unauthenticated referral flow:
    - Ensure cross-platform detection across various QR readers.
    - Redirect to web application signup page.
    - Maintain scan context through the signup process using a temporary token/ID system.
    - Implement security considerations for state management, including token expiration.
    - Trigger badge fulfillment on successful account creation.
    - Reconcile data between scan and new account.
-   Address architectural considerations including:
    - URL structure and parameter handling.
    - Cross-platform compatibility.
    - Error handling and edge cases.
    - Analytics and tracking requirements.
    - Database schema implications.
-   When generating QR codes for referrals:
    - Encode the referral URL with `referrerId`, `restaurantId` (optional), and a secure, time-limited `token`. Example: `/referral?referrerId=<userId>&restaurantId=<restaurantId>&token=<secureToken>`.
    - Generate tokens using JWT or random UUID, storing them in the `referral_tokens` table with metadata and expiration.
    - Create a backend endpoint `POST /api/referrals/generate` that accepts `{ referrerId, restaurantId }` and returns `{ url, token, expiresAt }`.
-   When an unauthenticated user scans a referral QR code:
    - The `/referral` route should detect the unauthenticated user and prompt them to sign up with a message like: "Sign up to claim your reward from <referrer/restaurant>!".
    - Store the referral token and parameters in session/localStorage for multi-step signup or in the Next.js server session.
    - Use a `referral_tokens` table with fields: `{ token, referrerId, restaurantId, createdAt, expiresAt, claimedByUserId, status }`. Mark the token as "claimed" after signup.
-   On signup completion:
    - Create a backend endpoint `POST /api/referrals/claim` that accepts `{ token, newUserId }`.
    - Validate the token and mark the referral as claimed.
    - Award the "First Restaurant" badge or points to the new user and optionally reward the referrer.
    - Link the referral record to the new user and log the conversion.
-   Implement the following security measures:
    - Use JWT (signed, expiring) or random UUID (stored in DB) for tokens.
    - Expire tokens after a short period (e.g., 24h).
    - Mark tokens as claimed after use.
    - Validate all parameters server-side.
    - Log all actions for audit/analytics.
-   Implement the following error handling:
    - Show an error and prompt to sign up without reward for invalid/expired tokens.
    - Inform the user and allow normal signup if the token is already claimed.
    - Show a generic error for missing parameters.
    - Ensure tokens remain unclaimed until expiration if signup is abandoned.
-   Implement analytics and tracking for:
    - QR code generation (who, when, where).
    - Scan events (IP, device, timestamp).
    - Signup completions (conversion rate).
    - Badge/point fulfillment.
-   The `referral_tokens` table should have the following structure:
    ```typescript
    export const referralTokens = pgTable("referral_tokens", {
      id: serial("id").primaryKey(),
      token: text("token").notNull().unique(),
      referrerId: integer("referrer_id").references(() => users.id),
      restaurantId: integer("restaurant_id").references(() => restaurants.id),
      createdAt: timestamp("created_at").defaultNow(),
      expiresAt: timestamp("expires_at"),
      claimedByUserId: integer("claimed_by_user_id").references(() => users.id),
      status: text("status").notNull().default("active"), // active, claimed, expired
    });
    ```
-   Implement the following API endpoints:
    - `POST /api/referrals/generate` – Authenticated, returns referral URL/token.
    - `GET /api/referrals/validate?token=...` – Validates token (for landing page).
    - `POST /api/referrals/claim` – On signup, claims reward.
-   **Public QR Onboarding Flow:**
    - **Scenario:** A non-app-user (stranger/guest) scans a QR code displayed at a participating restaurant. The system should:
        - Recognize the scan as coming from a public QR code (not a referral or user-generated code).
        - Guide the user to sign up for the app, preserving the context of which restaurant’s QR code was scanned.
        - Upon signup, award the "First Restaurant" badge or points.
    - **Step-by-Step Implementation Plan:**
        - **1. QR Code Generation & Placement**
            - **What Data Should Be Encoded?**
                - **URL format:**  
                  `https://app.example.com/qr?restaurantId=<restaurantId>&campaign=<optional>`
                    - `restaurantId`: Unique identifier for the restaurant.
                    - `campaign`: (Optional) For tracking special promotions.
            - **How to Generate?**
                - **Admin dashboard**: Restaurant admins or system admins generate QR codes for each location.
                - **Backend endpoint**:  
                  - `GET /api/qr/generate?restaurantId=...`
                  - Returns a QR code image (PNG/SVG) encoding the above URL.
                - **Physical placement**: Print and place QR codes on tables, menus, posters, etc.
        - **2. Scan by Unregistered User**
            - **Cross-Platform Detection**
                - Any QR reader (native camera, 3rd party app) opens the encoded URL in a browser.
            - **Landing Page Logic**
                - **Route:** `/qr` (Next.js page)
                - **Behavior:**
                    - If user is **not authenticated**:
                        - Show a branded landing page:  
                          “Welcome to [App Name]! You scanned a code at [Restaurant Name]. Sign up to start earning rewards.”
                        - Prominent **Sign Up** and **Sign In** buttons.
                        - Store `restaurantId` (and `campaign` if present) in localStorage, session, or as a query param for the signup flow.
                    - If user is **already authenticated**:
                        - Optionally, redirect to punch card for that restaurant or show a “Welcome back!” message.
        - **3. State Preservation Through Signup**
            - **How to Maintain Context?**
                - **Store `restaurantId` and `campaign`**:
                    - In localStorage/sessionStorage (client-side)
                    - Or as a query param passed through the signup flow
                - **Signup flow** (Clerk or custom):
                    - On successful signup, check for stored `restaurantId`/`campaign` context.
            - **Security Considerations**
                - No sensitive data in QR or URL.
                - Validate `restaurantId` on backend before granting rewards.
                - Optionally, set a short-lived cookie or session value for extra robustness.
        - **4. Signup Completion & Reward**
            - **On Account Creation**
                - **Backend logic** (triggered post-signup):
                    - Check for `restaurantId` context.
                    - Award “First Visit” badge, points, or other onboarding reward.
                    - Optionally, create a punch card for the restaurant.
                    - Log the event for analytics (user, restaurant, campaign, timestamp).
            - **Data Reconciliation**
                - Link the new user to the restaurant for analytics.
                - Optionally, send a welcome notification or email.
    - **Technical Requirements & Specifications**
        - **A. URL Structure & Parameter Handling**
            - `/qr?restaurantId=123&campaign=spring2024`
            - All params validated server-side.
            - Use Next.js dynamic route: `/app/qr/page.tsx`
        - **B. Token Expiration & Security**
            - No sensitive tokens needed; only public IDs.
            - Validate `restaurantId` exists and is active.
            - Prevent abuse (e.g., rate limit badge/point grants per user).
        - **C. Cross-Platform Compatibility**
            - QR code encodes HTTPS URL.
            - Works with any QR reader/camera.
            - Mobile-first, responsive landing page.
        - **D. Error Handling & Edge Cases**
            - **Invalid/missing `restaurantId`**: Show error, allow generic signup.
            - **Already signed up user scans**: Show punch card or “already a member” message.
            - **Signup abandoned**: No reward granted until signup completes.
        - **E. Analytics & Tracking**
            - Log:
                - QR code scans (IP, device, timestamp, restaurant, campaign)
                - Signups from QR flow (conversion rate)
                - Badge/point fulfillment
            - Use for campaign effectiveness, restaurant engagement, etc.
        - **F. Database Schema Implications**
            - **No new tables required** (unless you want to track scans separately).  
            - Optionally, add a `qr_signup_source` or `last_qr_scan_restaurant_id` field to the `users` table for attribution.
            - Log events in an `analytics` or `qr_scan_events` table for deeper insights.
    - **API Endpoints**
        | Endpoint                       | Method | Purpose                        | Auth Required | Params/Body                |
        |------------------------------- |--------|------------------------------- | 구분 | 구분 |
        | `/api/qr/generate`             | GET    | Generate QR code for restaurant| Yes (admin)  | `restaurantId`, `campaign`|
        | `/api/qr/scan`                 | POST   | Log scan event                 | No           | `{restaurantId, campaign, deviceInfo}`|
        | `/api/qr/signup-complete`      | POST   | Award badge/points post-signup | Yes (new user)| `{restaurantId, campaign}`|
    - **Data Flow Diagram**
        ```mermaid
        sequenceDiagram
            participant Guest as Unregistered User
            participant QR as QR Code
            participant App as Web App
            participant API as Backend API
            participant DB as Database

            Guest->>QR: Scans QR code
            QR-->>App: Opens /qr?restaurantId=123
            App->>API: POST /api/qr/scan (log event)
            App->>Guest: Shows signup prompt (with restaurant context)
            Guest->>App: Completes signup
            App->>API: POST /api/qr/signup-complete
            API->>DB: Award badge/points, create punch card
            App->>Guest: Shows welcome/reward
        ```
    - **Summary Table: Key Endpoints & Data**
        | Endpoint                       | Method | Purpose                        | Auth Required | Params/Body                |
        |------------------------------- |--------|------------------------------- | 구분 | 구분 |
        | `/api/qr/generate`             | GET    | Generate QR code for restaurant| Yes (admin)  | `restaurantId`, `campaign`|
        | `/api/qr/scan`                 | POST   | Log scan event                 | No           | `{restaurantId, campaign, deviceInfo}`|
        | `/api/qr/signup-complete`      | POST   | Award badge/points post-signup | Yes (new user)| `{restaurantId, campaign}`|
    - **Security & Best Practices**
        - No sensitive data in QR/URL.
        - Validate all params server-side.
        - Prevent duplicate rewards for same user/restaurant.
        - Log all actions for analytics.
    - **Edge Cases & Error Handling**
        - Invalid/missing `restaurantId`: Show error, allow generic signup.
        - Already registered user: Show punch card or “already a member” message.
        - Multiple signups from same device: Prevent abuse.
    - **Analytics & Tracking**
        - Track scans, signups, reward fulfillment.
        - Attribute new users to restaurants/campaigns.
    - **Database Schema Changes (Optional)**
        - Add `qr_signup_source` to `users` table.
        - Add `qr_scan_events` table for analytics.
    - **Next Steps**
        - Implement QR code generation and admin UI.
        - Build `/qr` landing page and signup flow.
        - Integrate reward logic post-signup.
        - Add analytics and error handling.
-   Use `zod` to validate QR code URLs. Example:
    ```typescript
    import { z } from 'zod';
    const qrSchema = z.string().url().refine(url => 
      url.startsWith('https://experiencemaplegrove.com/') || 
      url.startsWith('https://experiencemaplegrove.app/')
    );
    ```

## SUPABASE STORAGE RULES

-   Use the `qr-codes` bucket for storing QR codes.
-   Use the `restaurants` bucket for storing restaurant images and assets.

## STORAGE MODULE RULES

-   The Storage module provides a comprehensive interface for managing file storage operations in Supabase Storage. It supports two primary buckets:
    -   `restaurants` - For restaurant images (logos, banners, gallery images)
    -   `qr-codes` - For QR code images generated for restaurants

-   **Key Components:**
    -   `StorageResponse<T>` - Standardized response format with data, error, and success fields
    -   `UploadOptions` - Configuration for file uploads (cache control, upsert, content type)
    -   `ListOptions` - Configuration for file listing (pagination, sorting, search)
    -   `BucketName` - Type-safe bucket names (`'qr-codes' | 'restaurants'`)
    -   `FileObject` - Supabase file metadata structure
    -   `FileInfo` - Detailed file information structure

-   **Error Handling:**
    -   `StorageError` - Custom error class with error codes and details
    -   `StorageErrorCode` - Enumeration of specific error types
    -   Comprehensive error handling with user-friendly messages

-   **Security Features:**
    -   Path validation to prevent directory traversal attacks
    -   File type validation for images
    -   File size limits (50MB max)
    -   Content type validation

-   **Dual Client Support:**
    -   **Server Operations**: Use `createSupabaseServerClient()` for server-side operations
    -   **Client Operations**: Use `supabaseBrowserClient` for client-side operations

-   **Core Functions:**
    -   **Server-Side Operations:**
        -   **File Upload:**
            ```typescript
            uploadFileServer(
              bucket: BucketName,
              path: string